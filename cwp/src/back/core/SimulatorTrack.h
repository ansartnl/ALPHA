#ifndef SIMULATOR_TRACK_H
#define SIMULATOR_TRACK_H

#include <QTime>
#include <QLinkedList>
#include <QList>
#include <QMultiMap>
#include "TVAMacro.h"
#include "Coordinate.h"
#include "AirplaneData.h"
#include "Scene.h"

class CView;

//! Class is stored information about sector's point
class SectorPoint
{
public:
    SectorPoint();
    ~SectorPoint();

    //! Pointer to sector
    TVA_PROPERTIE(Scene::TScenePtr, Sector)
    //! Pointer to nearest boundary point of sector (if exists)
    TVA_PROPERTIE(QSharedPointer<CPoint>, Point)
};

//! Class describes the point generated by simulator
class SimulatorPoint
    : public CAirplaneData
{
public:
    typedef QMultiMap<int, SectorPoint> TSectorPointList;

    //! Constructor
    SimulatorPoint();
    SimulatorPoint(const CAirplaneData& ad);
    //! Destructor
    virtual ~SimulatorPoint();

    //! Add new sector information
    void AddSector(const Scene::TScenePtr& sector);
    //! Compare sector list with other
    bool CompareSectors(const TSectorPointList& other) const;
    //! Point sequence number (internal)
    TVA_PROPERTIE(int, PointSN)
    //! Time on point at the begin in seconds
    TVA_PROPERTIE(int, Seconds)
    //! Sectors information
    TVA_PROPERTIE(TSectorPointList, SectorList)
public:
    TSectorPointList& GetSectorList()
        { return m_SectorList; }
};

//! Class describes the track generated by simulator
class SimulatorTrack
{
public:
    typedef QLinkedList<QSharedPointer<SimulatorPoint> > TPointList;

    //! Constructor
    SimulatorTrack();
    //! Destructor
    ~SimulatorTrack();

    //! Add new point
    void AddPoint(const CAirplaneData& ad, int iSeconds);
    //! List of boundary points
    const TPointList& GetBoundaryPoints() const;
    //! List of all points
    const TPointList& GetAllPoints() const;
    //! Sectors calculation
    void CalculateSectors(const QSharedPointer<IScene>& pScene);

private:
    QMultiMap<int, QSharedPointer<CPoint> > GetSectorBoundaryPoints(const CCoord& coord, const Scene::TScenePtr& sector);
    QSharedPointer<CPoint> FindBoundaryPoint(const QMultiMap<int, QSharedPointer<CPoint> >& map1, const QMultiMap<int, QSharedPointer<CPoint> >& map2);

private:
    TPointList  m_AllPoints;
    TPointList  m_BoundaryPoints;
    int         m_PointSN;
};

#endif // SIMULATOR_TRACK_H
