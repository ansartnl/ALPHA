#include "LayoutDlg.h"
#include "View.h"
#include "GUIView.h"
#include <QTreeWidgetItem>

#include "main.h"

LayoutDlg::TFIRLayout	LayoutDlg::m_mapLayouts = TFIRLayout();
LayoutDlg::TFIRMap	LayoutDlg::m_mapSSA = TFIRMap();
LayoutDlg::TFIRHoldMap	LayoutDlg::m_mapHolding = TFIRHoldMap();
LayoutDlg::TFIRRestrictionMap	LayoutDlg::m_mapRestriction = TFIRRestrictionMap();
LayoutDlg::TFIRAreas	LayoutDlg::m_mapAreas = TFIRAreas();


LayoutDlg::LayoutDlg(bool bOnlyMainFIR, const QSharedPointer<IScene> &pScene, QWidget *pParent, Qt::WindowFlags f)
    : QDialog(pParent, f), m_bChecking(false), mItemState(-1)
{
    m_pView = qSharedPointerDynamicCast<CView>(pScene);
    setupUi(this);
	
    treeWidget->setSelectionMode(QAbstractItemView::SingleSelection);
    treeWidget->setSelectionBehavior(QAbstractItemView::SelectRows);

    if(m_pView)
    {
        CView::TScenePtr pMainFIR = m_pView->GetMainFIR();
        if(pMainFIR)
        {
            QTreeWidgetItem* pMyItem = InsertMyFIRItem(pMainFIR);
            if(bOnlyMainFIR)
            {
                treeWidget->expandItem(pMyItem);
                onItemExpanded(pMyItem);
            }
        }
        if(!bOnlyMainFIR)
        {
            QTreeWidgetItem* pOtherItem(0);
            if(m_pView->GetScenes().size() > 1)
            {
                pOtherItem = new QTreeWidgetItem(treeWidget);
                pOtherItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsSelectable);
                pOtherItem->setText(0, tr("Others"));
                QVariantList qList;
                qList.append(Others);
                pOtherItem->setData(0, Qt::UserRole, qList);
            }
            if(m_pView->GetScenes().size() > 2)
            {
                QTreeWidgetItem* pItem = InsertFIRItem(QSharedPointer<Scene>(), pOtherItem);
                if(pItem)
                {
                    pItem->setText(0, tr("( ALL )"));
                    QVariantList qList;
                    qList.append(All);
                    pItem->setData(0, Qt::UserRole, qList);
                }
            }
            CView::TSceneList::const_iterator itFIR = m_pView->GetScenes().begin();
            for(; itFIR != m_pView->GetScenes().end(); ++itFIR)
            {
                if(pMainFIR != *itFIR)
                {
                    QTreeWidgetItem* pItem = InsertFIRItem(*itFIR, pOtherItem);
                    if(pItem)
                    {
                        InsertFIRSSA(*itFIR, pItem);
                        InsertFIRHolding(*itFIR, pItem);
                        InsertFIRRestriction(*itFIR, pItem);
                        ///InsertFIRArea(*itFIR, pItem);
                    }
                }
            }
        }
    }

    treeWidget->sortItems(0, Qt::AscendingOrder);

    connect(treeWidget, SIGNAL(itemChanged(QTreeWidgetItem*,int)), this, SLOT(OnItemChanged(QTreeWidgetItem*,int)));

    QFont font1 = treeWidget->font();
    font1.setPointSize(AppSettings::GetTextSize().GetCurrentTextSize());
    treeWidget->setFont(font1);

    restoreTreeState();

    connect(treeWidget, SIGNAL(itemCollapsed(QTreeWidgetItem*)), this, SLOT(onItemCollapsed(QTreeWidgetItem*)));
    connect(treeWidget, SIGNAL(itemExpanded(QTreeWidgetItem*)), this, SLOT(onItemExpanded(QTreeWidgetItem*)));

    treeWidget->setExpandsOnDoubleClick(false);

    connect(treeWidget, SIGNAL(itemPressed(QTreeWidgetItem*,int)), SLOT(onItemPressed(QTreeWidgetItem*)));
    connect(treeWidget, SIGNAL(itemClicked(QTreeWidgetItem*,int)), SLOT(onItemClicked(QTreeWidgetItem*)));

    restoreSettings();
}

LayoutDlg::~LayoutDlg()
{
    saveSettings();
}

void LayoutDlg::changeEvent(QEvent *event)
{
    //LanguageChange events should not be confused with LocaleChange events.
  if (event->type() == QEvent::LocaleChange) {
    // HERE we can un|install qtranslator
    //    Locale-Change events are generated by the system and tell the application,
    //    "Maybe you should load a new translation."
  } else if (event->type() == QEvent::LanguageChange) {
    //    LanguageChange events are generated by Qt and tell the application's widgets,
    //    "Maybe you should retranslate all your strings."
    retranslateUi(this);
  }

  QDialog::changeEvent(event);
}

void LayoutDlg::saveSettings()
{
    QSettings& settings = *globalSettings();
    settings.setValue("XMaster/LayoutDlg/Geometry", saveGeometry());
}

void LayoutDlg::restoreSettings()
{
    QSettings& settings = *globalSettings();
    restoreGeometry(settings.value("XMaster/LayoutDlg/Geometry").toByteArray());
}

void LayoutDlg::saveTreeState()
{
    QSettings& settings = *globalSettings();
    settings.setValue("XMaster/LayoutDlg/ExpandedItems", QVariant::fromValue(QStringList(mExpandedItems.toList())));
}

void LayoutDlg::restoreTreeState()
{
    QSettings& settings = *globalSettings();
    mExpandedItems += QSet<QString>::fromList(settings.value("XMaster/LayoutDlg/ExpandedItems").toStringList());

    treeWidget->setUpdatesEnabled(false);

    applyExpandedState( mExpandedItems,
                          treeWidget,
                          treeWidget->model(),
                          treeWidget->model()->index( 0, 0, QModelIndex() ) );

    treeWidget->setUpdatesEnabled(true);
}

void LayoutDlg::applyExpandedState(const QSet<QString> &expandedItems, QTreeView *treeView, QAbstractItemModel *model, QModelIndex startIndex)
{
    foreach (const QString &item, expandedItems)
    {
        QModelIndexList matches = model->match(startIndex, Qt::DisplayRole, item);
        foreach (QModelIndex index, matches)
        {
            treeView->setExpanded(index, true);
            applyExpandedState(expandedItems,
                                 treeView,
                                 model,
                                 model->index( 0, 0, index ) );
        }
    }
}

void LayoutDlg::accept()
{
    for (int i = 0; i < treeWidget->topLevelItemCount(); ++i)
    {
        QTreeWidgetItem* pItem = treeWidget->topLevelItem(i);
        if (pItem->data(0, Qt::UserRole).toList()[0].toUInt() == FIR_My)
            SaveFIRLayouts(pItem);
        if (pItem->data(0, Qt::UserRole).toList()[0].toUInt() == Others)
        {
            for (int k = 0; k < pItem->childCount(); ++k)
            {
                if (pItem->child(k)->data(0, Qt::UserRole).toList()[0].toUInt() == FIR)
                    SaveFIRLayouts(pItem->child(k));
            }
        }
    }
    if (m_pView)
    {
        CGUIView* pView = dynamic_cast<CGUIView*>(m_pView.data());
        if (pView)
            pView->SetLayouts();
    }

    saveTreeState();

    emit applyLayouts();
}

const bool LayoutDlg::IsSSAEnable(const QString sFir, const quint32 AirportID, const quint32 RunwayID, const quint32 SSAID)
{
    if(IsLayoutEnable(sFir, SSA)) return true;
    TFIRMap::const_iterator itFir = m_mapSSA.find(sFir);
    if(itFir != m_mapSSA.end())
    {
        TSSAMap::const_iterator itSSA = (*itFir).find(TSSAKey(QPair<quint32, quint32>(AirportID, RunwayID), SSAID));
        if(itSSA != (*itFir).end()) return itSSA.value();
        else
        {
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found SSA in layouts map.");
        }
    }
    return true;
}

const bool LayoutDlg::IsSvgEnable(const QString sFir, const quint32 AirportID, const quint32 Svg_id)
{
    if(IsLayoutEnable(sFir, SSA)) return true;
    TFIRMap::const_iterator itFir = m_mapSSA.find(sFir);
    if(itFir != m_mapSSA.end())
    {
        TSSAMap::const_iterator itSSA = (*itFir).find(TSSAKey(QPair<quint32, quint32>(AirportID, Svg_id), -1));
        if(itSSA != (*itFir).end())
        {
            //qDebug() << itSSA.value();
            return itSSA.value();
        }
        else
        {
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found Svg in layouts map.");
        }
    }
    return true;
}

const bool LayoutDlg::IsHoldingEnable(const QString sFir, const quint32 HoldingID)
{
    if(IsLayoutEnable(sFir, Holding)) return true;
    TFIRHoldMap::const_iterator itFir = m_mapHolding.find(sFir);
    if(itFir != m_mapHolding.end())
    {
        THoldingMap::const_iterator itHolding = itFir->find(HoldingID);
        if(itHolding != itFir->end()) return itHolding.value();
        else
        {
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found holding in layouts map.");
        }
    }
    return true;
}

const bool LayoutDlg::IsRestrictionEnable(const QString sKey, const qint32 RestrictionTypeID)
{
    TFIRRestrictionMap::const_iterator itKey = m_mapRestriction.find(sKey);
    if (itKey != m_mapRestriction.end())
    {
        TRestrictionMap::const_iterator itRestriction = itKey->find(RestrictionTypeID);
        if (itRestriction != itKey->end())
            return itRestriction.value();
        else
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found restriction in layouts map.");
    }
    return true;
}

const bool LayoutDlg::IsAreaEnable(const QString &sFir, const QString &areaName)
{
    if(IsLayoutEnable(sFir, Map))
        return true;
    TFIRAreas::const_iterator itFir = m_mapAreas.find(sFir);
    if(itFir != m_mapAreas.end())
    {
        TMapArea::const_iterator itArea = itFir->find(areaName);
        if(itArea != itFir->end())
            return itArea.value();
        else
        {
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found area in layouts map.");
        }
    }
    return true;
}

void LayoutDlg::AdvancedSelection(QTreeWidgetItem* pItem, const Qt::CheckState qState)
{
    if(pItem && (pItem->flags() & Qt::ItemIsUserCheckable))
    {
        m_bChecking = true;
        pItem->setCheckState(0, qState);
        if(qState != Qt::PartiallyChecked)
        {
            for(int i = 0; i < pItem->childCount(); ++i)
            {
                QTreeWidgetItem* pChild = pItem->child(i);
                Qt::CheckState qOldState = pChild->checkState(0);
                if(qOldState != qState)
                    AdvancedSelection(pChild, qState);
            }
            UpdateParent(pItem->parent());
        }
        m_bChecking = false;
    }
}

void LayoutDlg::UpdateParent(QTreeWidgetItem* pItem)
{
    if(pItem && (pItem->flags() & Qt::ItemIsUserCheckable))
    {
        m_bChecking = true;
        Qt::CheckState qState = pItem->child(0)->checkState(0);
        for(int i = 0; i < pItem->childCount(); ++i)
        {
            if(qState != pItem->child(i)->checkState(0))
            {
                qState = Qt::PartiallyChecked;
                break;
            }
        }
        pItem->setCheckState(0, qState);
        UpdateParent(pItem->parent());
        m_bChecking = false;
    }
}

void LayoutDlg::OnItemChanged(QTreeWidgetItem* pItem, int column)
{
    if(m_bChecking || (column != 0)) return;
    AdvancedSelection(pItem, pItem->checkState(0));
    QTreeWidgetItem* pParentItem = pItem ? pItem->parent() : 0;
    if(pParentItem)
    {
        if(pParentItem->data(0, Qt::UserRole).toList()[0].toUInt() == All)
            OthersCheck(pItem->data(0, Qt::UserRole).toList()[1].toUInt(), pItem->checkState(0));
    }
}

void LayoutDlg::onItemExpanded(QTreeWidgetItem *pItem)
{
    //qDebug() << pItem->data(0, Qt::DisplayRole).toString();
    mExpandedItems.insert(pItem->data(0, Qt::DisplayRole).toString());
}

void LayoutDlg::onItemCollapsed(QTreeWidgetItem *pItem)
{
    mExpandedItems.remove(pItem->data(0, Qt::DisplayRole).toString());
}

void LayoutDlg::onItemPressed(QTreeWidgetItem *item)
{
    mItemState = item->checkState(0);
}

void LayoutDlg::onItemClicked(QTreeWidgetItem *item)
{
    Qt::CheckState oldState = item->checkState(0);
    if (oldState == mItemState)
    {
        if (oldState == Qt::Unchecked)
            item->setCheckState(0, Qt::Checked);
        else
            item->setCheckState(0, Qt::Unchecked);
    }

    mItemState = -1;
    emit accept();
}

const quint32 LayoutDlg::GetLayouts(const QString sFir)
{
    quint32 layouts = 0xFFFFFFFF;
    TFIRLayout::const_iterator itFir = m_mapLayouts.find(sFir);
    if(itFir != m_mapLayouts.end()) layouts = (*itFir);
    return layouts;
}

void LayoutDlg::SetLayouts(const QString sFir, const quint32 layouts)
{
    m_mapLayouts.insert(sFir, layouts);
}

const bool LayoutDlg::IsLayoutEnable(const QString sFir, const LayoutDlg::LayoutType layout)
{
    TFIRLayout::const_iterator itFir = m_mapLayouts.find(sFir);
    if(itFir != m_mapLayouts.end()) return (*itFir) & layout;
    return true;
}

QTreeWidgetItem* LayoutDlg::InsertMyFIRItem(const QSharedPointer<Scene>& pFIR)
{
    quint32 layouts = 0xFFFFFFFF;
    if (pFIR)
    {
        //qDebug() << pFIR->GetIDName();
        layouts = GetLayouts(pFIR->GetIDName());
    }

    QPixmap pixmap(16,16);
    QVariantList qList;

    QTreeWidgetItem* pMyItem = new QTreeWidgetItem(treeWidget);
    pMyItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsSelectable);
    if (pFIR)
        pMyItem->setText(0, pFIR->GetName());
    qList.clear();
    qList.append(FIR_My);
    qList.append(pFIR ? pFIR->GetIDName() : QString::null);
    pMyItem->setData(0, Qt::UserRole, qList);
    QFont font = pMyItem->font(0);
    font.setBold(true);
    pMyItem->setFont(0, font);

    QTreeWidgetItem* pItem = new QTreeWidgetItem(pMyItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Holding ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Holding zones"));
    qList.clear();
    qList.append(Layout);
    qList.append(Holding);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/HoldingIcon"));

    /*QTreeWidgetItem* pItem = new QTreeWidgetItem(pMyItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Restriction ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Restriction zones"));
    qList.clear();
    qList.append(Layout);
    qList.append(Restriction);
    pItem->setData(0, Qt::UserRole, qList);
    pixmap.fill(QColor(255,0,0,100));
    pItem->setIcon(0, QIcon(pixmap));*/

//    pItem = new QTreeWidgetItem(pMyItem);
//    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
//    pItem->setCheckState(0, layouts & Map ? Qt::Checked : Qt::Unchecked);
//    pItem->setText(0, tr("Maps"));
//    qList.clear();
//    qList.append(Layout);
//    qList.append(Map);
//    pItem->setData(0, Qt::UserRole, qList);
//    pItem->setIcon(0, QIcon(":/PressIcons/Press"));

//    pItem = new QTreeWidgetItem(pMyItem);
//    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
//    pItem->setCheckState(0, layouts & Meteo ? Qt::Checked : Qt::Unchecked);
//    pItem->setText(0, tr("Meteo zones"));
//    qList.clear();
//    qList.append(Layout);
//    qList.append(Meteo);
//    pItem->setData(0, Qt::UserRole, qList);
//    pixmap.fill(QColor(0,0,255,100));
//    pItem->setIcon(0, QIcon(pixmap));

//    pItem = new QTreeWidgetItem(pMyItem);
//    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
//    pItem->setCheckState(0, layouts & RcGrid ? Qt::Checked : Qt::Unchecked);
//    pItem->setText(0, tr("Radial circular grid"));
//    qList.clear();
//    qList.append(Layout);
//    qList.append(RcGrid);
//    pItem->setData(0, Qt::UserRole, qList);
//    pItem->setIcon(0, QIcon(":/Icons/GridIcon"));

    pItem = new QTreeWidgetItem(pMyItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    //pItem->setCheckState(0, layouts & Point ? Qt::Checked : Qt::Unchecked);
    pItem->setCheckState(0, Qt::Checked);
    pItem->setText(0, tr("Points"));
    qList.clear();
    qList.append(Layout);
    qList.append(Point);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/PointIcon"));
    pItem->setHidden(true);

//    pItem = new QTreeWidgetItem(pMyItem);
//    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
//    pItem->setCheckState(0, layouts & MapNote ? Qt::Checked : Qt::Unchecked);
//    pItem->setText(0, tr("Map Notes"));
//    qList.clear();
//    qList.append(Layout);
//    qList.append(MapNote);
//    pItem->setData(0, Qt::UserRole, qList);
//    pItem->setIcon(0, QIcon(":/EditIcons/EditIcon"));

    /*pItem = new QTreeWidgetItem(pMyItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Airport ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Aerodromes"));
    qList.clear();
    qList.append(Layout);
    qList.append(Airport);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/AirportIcon"));*/

    pItem = new QTreeWidgetItem(pMyItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    //pItem->setCheckState(0, layouts & Route ? Qt::Checked : Qt::Unchecked);
    pItem->setCheckState(0, Qt::Checked);
    pItem->setText(0, tr("Routes"));
    qList.clear();
    qList.append(Layout);
    qList.append(Route);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/RouteIcon"));
    pItem->setHidden(true);

//    pItem = new QTreeWidgetItem(pMyItem);
//    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
//    pItem->setCheckState(0, layouts & Runway ? Qt::Checked : Qt::Unchecked);
//    pItem->setText(0, tr("Runways"));
//    qList.clear();
//    qList.append(Layout);
//    qList.append(Runway);
//    pItem->setData(0, Qt::UserRole, qList);
//    pItem->setIcon(0, QIcon(":/Icons/RunwayIcon"));

    pItem = new QTreeWidgetItem(pMyItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & SSA ? Qt::Checked : Qt::Unchecked);
    //pItem->setText(0, tr("SSA"));
    pItem->setText(0, tr("SID / STAR"));
    qList.clear();
    qList.append(Layout);
    qList.append(SSA);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/SSAIcon"));

    InsertFIRSSA(pFIR, pMyItem);
    InsertFIRHolding(pFIR, pMyItem);
    InsertFIRRestriction(pFIR, pMyItem);
//    InsertFIRArea(pFIR, pMyItem);

    return pMyItem;
}

QTreeWidgetItem* LayoutDlg::InsertFIRItem(const QSharedPointer<Scene>& pFIR, QTreeWidgetItem* parent)
{
    quint32 layouts = 0xFFFFFFFF;
    if(pFIR) layouts = GetLayouts(pFIR->GetIDName());

    QPixmap pixmap(16,16);
    QVariantList qList;

    QTreeWidgetItem* pFIRItem = parent ? new QTreeWidgetItem(parent) : new QTreeWidgetItem(treeWidget);
    pFIRItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsSelectable);
    if(pFIR) pFIRItem->setText(0, pFIR->GetName());
    qList.clear();
    qList.append(FIR);
    qList.append(pFIR ? pFIR->GetIDName() : QString::null);
    pFIRItem->setData(0, Qt::UserRole, qList);

    QTreeWidgetItem* pItem = new QTreeWidgetItem(pFIRItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Holding ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Holding zones"));
    qList.clear();
    qList.append(Layout);
    qList.append(Holding);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/HoldingIcon"));

    pItem = new QTreeWidgetItem(pFIRItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Restriction ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Restriction zones"));
    qList.clear();
    qList.append(Layout);
    qList.append(Restriction);
    pItem->setData(0, Qt::UserRole, qList);
    pixmap.fill(QColor(255,0,0,100));
    pItem->setIcon(0, QIcon(pixmap));

    pItem = new QTreeWidgetItem(pFIRItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Point ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Points"));
    qList.clear();
    qList.append(Layout);
    qList.append(Point);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/PointIcon"));

    pItem = new QTreeWidgetItem(pFIRItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Airport ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Aerodromes"));
    qList.clear();
    qList.append(Layout);
    qList.append(Airport);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/AirportIcon"));

    pItem = new QTreeWidgetItem(pFIRItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & Route ? Qt::Checked : Qt::Unchecked);
    pItem->setText(0, tr("Routes"));
    qList.clear();
    qList.append(Layout);
    qList.append(Route);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/RouteIcon"));

//    pItem = new QTreeWidgetItem(pFIRItem);
//    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
//    pItem->setCheckState(0, layouts & Runway ? Qt::Checked : Qt::Unchecked);
//    pItem->setText(0, tr("Runways"));
//    qList.clear();
//    qList.append(Layout);
//    qList.append(Runway);
//    pItem->setData(0, Qt::UserRole, qList);
//    pItem->setIcon(0, QIcon(":/Icons/RunwayIcon"));

    pItem = new QTreeWidgetItem(pFIRItem);
    pItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    pItem->setCheckState(0, layouts & SSA ? Qt::Checked : Qt::Unchecked);
    //pItem->setText(0, tr("SSA"));
    pItem->setText(0, tr("SID / STAR"));
    qList.clear();
    qList.append(Layout);
    qList.append(SSA);
    pItem->setData(0, Qt::UserRole, qList);
    pItem->setIcon(0, QIcon(":/Icons/SSAIcon"));

    return pFIRItem;
}

void LayoutDlg::InsertFIRSSA(const QSharedPointer<Scene>& pFIR, QTreeWidgetItem* parent)
{
    SetFIRSSA(pFIR);

    if(!pFIR || !parent) return;

    QTreeWidgetItem* pParentItem = 0;
    for(int i = 0; i < parent->childCount(); ++i)
    {
        QTreeWidgetItem* pItem = parent->child(i);
        QVariantList data = pItem->data(0, Qt::UserRole).toList();
        if((data[0].toUInt() == Layout) && (data[1].toUInt() == SSA))
            pParentItem = pItem;
    }
    if(!pParentItem) return;

    QVariantList qList;
    Scene::TAirportsMap::const_iterator itAirport = pFIR->GetAirports().begin();
    for(; itAirport != pFIR->GetAirports().end(); ++itAirport)
    {
        if ((*itAirport)->GetName() != networkSettings()->value("meteo/airport").toString())
            continue;

        bool bShow = false;
        {
            CAirport::TRunways::const_iterator itRunway = (*itAirport)->GetRunways().begin();
            for(; itRunway != (*itAirport)->GetRunways().end(); ++itRunway)
            {
                if((*itRunway)->GetSSA().size())
                {
                    bShow = true;
                    break;
                }
            }
        }
        if(bShow)
        {
            QTreeWidgetItem* pAirportItem = new QTreeWidgetItem(pParentItem);
            pAirportItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
            AdvancedSelection(pAirportItem, Qt::Unchecked);
            //qDebug() << (*itAirport)->GetName();
            pAirportItem->setText(0, (*itAirport)->GetName());
            qList.clear();
            qList.append(LayoutSSA);
            qList.append((*itAirport)->GetID());
            pAirportItem->setData(0, Qt::UserRole, qList);

            if((*itAirport)->GetSvgItems().size() > 0)
            {
                CAirport::TSvgItems::ConstIterator itSvg = (*itAirport)->GetSvgItems().begin();
                for(; itSvg != (*itAirport)->GetSvgItems().end(); itSvg++)
                {
                    QTreeWidgetItem* pSvgItem = new QTreeWidgetItem(pAirportItem);
                    pSvgItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
                    AdvancedSelection(pSvgItem,
                                      IsSvgEnable(pFIR->GetIDName(), (*itAirport)->GetID(), itSvg->data()->GetSvgItemID())
                                      ? Qt::Checked : Qt::Unchecked);
                    pSvgItem->setText(0, itSvg.key());
                    qList.clear();
                    qList.append(LayoutSvg);
                    qList.append(itSvg->data()->GetSvgItemID());
                    pSvgItem->setData(0, Qt::UserRole, qList);
                }
            }

            CAirport::TRunways::const_iterator itRunway = (*itAirport)->GetRunways().begin();
            for(; itRunway != (*itAirport)->GetRunways().end(); ++itRunway)
            {
                if((*itRunway)->GetSSA().size())
                {
                    QTreeWidgetItem* pRunwayItem = new QTreeWidgetItem(pAirportItem);
                    pRunwayItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
                    AdvancedSelection(pRunwayItem, Qt::Unchecked);
                    pRunwayItem->setText(0, (*itRunway)->GetName());
                    qList.clear();
                    qList.append(LayoutSSA);
                    qList.append((*itRunway)->GetID());
                    pRunwayItem->setData(0, Qt::UserRole, qList);

                    QTreeWidgetItem* pSSA_SID_Item = new QTreeWidgetItem(pRunwayItem);
                    pSSA_SID_Item->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
                    AdvancedSelection(pSSA_SID_Item, Qt::Unchecked);
                    pSSA_SID_Item->setText(0, tr("SID"));
                    qList.clear();
                    qList.append(LayoutSSA_SID);
                    qList.append(0);
                    pSSA_SID_Item->setData(0, Qt::UserRole, qList);

                    QTreeWidgetItem* pSSA_STAR_Item = new QTreeWidgetItem(pRunwayItem);
                    pSSA_STAR_Item->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
                    AdvancedSelection(pSSA_STAR_Item, Qt::Unchecked);
                    pSSA_STAR_Item->setText(0, tr("STAR"));
                    qList.clear();
                    qList.append(LayoutSSA_STAR);
                    qList.append(0);
                    pSSA_STAR_Item->setData(0, Qt::UserRole, qList);

                    /*QTreeWidgetItem* pSSA_OTHER_Item = new QTreeWidgetItem(pRunwayItem);
                    pSSA_OTHER_Item->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
                    AdvancedSelection(pSSA_OTHER_Item, Qt::Unchecked);
                    pSSA_OTHER_Item->setText(0, tr("Other"));
                    qList.clear();
                    qList.append(LayoutSSA_OTHER);
                    qList.append(0);
                    pSSA_OTHER_Item->setData(0, Qt::UserRole, qList);*/

                    CRunway::TSSA::const_iterator itSSA = (*itRunway)->GetSSA().begin();
                    for(; itSSA != (*itRunway)->GetSSA().end(); ++itSSA)
                    {
                        if((*itSSA)->GetEnable())
                        {
                            QTreeWidgetItem* pSSAParentItem = pSSA_STAR_Item;
                            //QTreeWidgetItem* pSSAParentItem = pSSA_OTHER_Item;
                            switch((*itSSA)->GetType())
                            {
                            case CSSA::enSTAR: pSSAParentItem = pSSA_STAR_Item; break;
                            case CSSA::enSID: pSSAParentItem = pSSA_SID_Item; break;
                            default: break;
                            }
                            QTreeWidgetItem* pSSAItem = new QTreeWidgetItem(pSSAParentItem);
                            pSSAItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
                            AdvancedSelection(pSSAItem,
                                              IsSSAEnable(pFIR->GetIDName(), (*itAirport)->GetID(), (*itRunway)->GetID(), (*itSSA)->GetID())
                                              ? Qt::Checked : Qt::Unchecked);
                            QString sType;
                            switch((*itSSA)->GetType())
                            {
                            case CSSA::enApproach: sType = tr(" (Approach)"); break;
                            case CSSA::enSTAR: sType = tr(" (STAR)"); break;
                            case CSSA::enSID: sType = tr(" (SID)"); break;
                            case CSSA::enVA: sType = tr(" (VA)"); break;
                            case CSSA::enMA: sType = tr(" (MA)"); break;
                            default: break;
                            }
                            pSSAItem->setText(0, (*itSSA)->GetName() + sType);
                            qList.clear();
                            qList.append(LayoutSSA);
                            qList.append((*itSSA)->GetID());
                            pSSAItem->setData(0, Qt::UserRole, qList);
                        }
                    }
                }
            }
        }
    }
    if(IsLayoutEnable(pFIR->GetIDName(), SSA)) AdvancedSelection(pParentItem, Qt::Checked);
}

void LayoutDlg::InsertFIRHolding(const QSharedPointer<Scene>& pFIR, QTreeWidgetItem* parent)
{
    SetFIRHolding(pFIR);

    if(!pFIR || !parent) return;

    QTreeWidgetItem* pParentItem = 0;
    for(int i = 0; i < parent->childCount(); ++i)
    {
        QTreeWidgetItem* pItem = parent->child(i);
        QVariantList data = pItem->data(0, Qt::UserRole).toList();
        if((data[0].toUInt() == Layout) && (data[1].toUInt() == Holding))
            pParentItem = pItem;
    }
    if(!pParentItem) return;

    Scene::THoldingList::const_iterator itHolding = pFIR->GetHolding().begin();
    for(; itHolding != pFIR->GetHolding().end(); ++itHolding)
    {
        //if((*itHolding)->GetEnable())
        {
            QTreeWidgetItem* pHoldingItem = new QTreeWidgetItem(pParentItem);
            pHoldingItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
            AdvancedSelection(pHoldingItem,
                              IsHoldingEnable(pFIR->GetIDName(), (*itHolding)->GetID())
                              ? Qt::Checked : Qt::Unchecked);
            pHoldingItem->setText(0, QString("%1/%2").arg((*itHolding)->GetPoint()->GetName()).arg(qRound((*itHolding)->GetInCourse()), 3, 10, QLatin1Char('0')));
            QVariantList qList;
            qList.append(LayoutHolding);
            qList.append((*itHolding)->GetID());
            pHoldingItem->setData(0, Qt::UserRole, qList);
        }
    }
    if(IsLayoutEnable(pFIR->GetIDName(), Holding)) AdvancedSelection(pParentItem, Qt::Checked);
}

void LayoutDlg::SaveFIRLayouts(const QTreeWidgetItem* pFIRItem)
{
    quint32 layouts = 0;
    QTreeWidgetItem* pSSAParentItem = 0;
    QTreeWidgetItem* pHoldingParentItem = 0;
    QTreeWidgetItem* pRestrictionParentItem = 0;
    QTreeWidgetItem* pAreaParentItem = 0;
    for(int i = 0; i < pFIRItem->childCount(); ++i)
    {
        QTreeWidgetItem* pItem = pFIRItem->child(i);
        if((pItem->data(0, Qt::UserRole).toList()[0].toUInt() == Layout) &&
           (pItem->data(0, Qt::UserRole).toList()[1].toUInt() == SSA))
            pSSAParentItem = pItem;
        if((pItem->data(0, Qt::UserRole).toList()[0].toUInt() == Layout) &&
           (pItem->data(0, Qt::UserRole).toList()[1].toUInt() == Holding))
            pHoldingParentItem = pItem;
        if((pItem->data(0, Qt::UserRole).toList()[0].toUInt() == Layout) &&
           (pItem->data(0, Qt::UserRole).toList()[1].toUInt() == Restriction))
            pRestrictionParentItem = pItem;
        if((pItem->data(0, Qt::UserRole).toList()[0].toUInt() == Layout) &&
           (pItem->data(0, Qt::UserRole).toList()[1].toUInt() == Map))
            pAreaParentItem = pItem;
        if(pItem && (pItem->checkState(0) == Qt::Checked))
        {
            QVariantList data = pItem->data(0, Qt::UserRole).toList();
            if(data[0].toUInt() == Layout)
            {
                layouts |= data[1].toUInt();
            }
        }
    }
    m_mapLayouts.insert(pFIRItem->data(0, Qt::UserRole).toList()[1].toString(), layouts);

    if(pSSAParentItem)
    {
        TFIRMap::iterator curMap = m_mapSSA.find(pFIRItem->data(0, Qt::UserRole).toList()[1].toString());
        if(curMap == m_mapSSA.end())
        {
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found SSA in layouts map.");
            return;
        }
        for(int i = 0; i < pSSAParentItem->childCount(); ++i)
        {
            QTreeWidgetItem* pAirportItem = pSSAParentItem->child(i);
            for(int j = 0; j < pAirportItem->childCount(); ++j)
            {

                QTreeWidgetItem* pAirportChild = pAirportItem->child(j);
                if(pAirportChild->data(0, Qt::UserRole).toList()[0].toInt() == LayoutSvg)
                {
                    Qt::CheckState qState = pAirportChild->checkState(0);
                    bool bVal = false;
                    if(qState == Qt::Checked) bVal = true;
                    if(qState == Qt::PartiallyChecked)
                    {
                        LOG_STR(Log4Qt::Level::DEBUG_INT, "Illegal state in layouts.");
                    }
                    TSSAKey keySSA(QPair<quint32, quint32>
                            (pAirportItem->data(0, Qt::UserRole).toList()[1].toUInt(),
                             pAirportChild->data(0, Qt::UserRole).toList()[1].toUInt()), -1);
                    TSSAMap::const_iterator itFind = (*curMap).find(keySSA);
                    if(itFind == (*curMap).end())
                    {
                        LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found SVG in layouts map.");
                    }
                    else
                        (*curMap).insert(keySSA, bVal);
                }
                if(pAirportChild->data(0, Qt::UserRole).toList()[0].toInt() == LayoutSSA)
                {
                    for(int k = 0; k < pAirportChild->childCount(); ++k)
                    {
                        QTreeWidgetItem* pSSATypeItem = pAirportChild->child(k);
                        for(int n = 0; n < pSSATypeItem->childCount(); ++n)
                        {
                            QTreeWidgetItem* pSSAItem = pSSATypeItem->child(n);
                            Qt::CheckState qState = pSSAItem->checkState(0);
                            bool bVal = false;
                            if(qState == Qt::Checked) bVal = true;
                            if(qState == Qt::PartiallyChecked)
                            {
                                LOG_STR(Log4Qt::Level::DEBUG_INT, "Illegal state in layouts.");
                            }
                            TSSAKey keySSA(QPair<quint32, quint32>
                                    (pAirportItem->data(0, Qt::UserRole).toList()[1].toUInt(),
                                     pAirportChild->data(0, Qt::UserRole).toList()[1].toUInt()),
                                    pSSAItem->data(0, Qt::UserRole).toList()[1].toUInt());
                            TSSAMap::const_iterator itFind = (*curMap).find(keySSA);
                            if(itFind == (*curMap).end())
                            {
                                LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found SSA in layouts map.");
                            }
                            else
                                (*curMap).insert(keySSA, bVal);
                        }
                    }
                }
            }
        }
    }

    if(pHoldingParentItem)
    {
        TFIRHoldMap::iterator curMap = m_mapHolding.find(pFIRItem->data(0, Qt::UserRole).toList()[1].toString());
        if(curMap == m_mapHolding.end())
        {
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found holding in layouts map.");
            return;
        }
        for(int i = 0; i < pHoldingParentItem->childCount(); ++i)
        {
            QTreeWidgetItem* pHoldingItem = pHoldingParentItem->child(i);
            Qt::CheckState qState = pHoldingItem->checkState(0);
            bool bVal = false;
            if(qState == Qt::Checked) bVal = true;
            if(qState == Qt::PartiallyChecked)
            {
                LOG_STR(Log4Qt::Level::DEBUG_INT, "Illegal state in layouts.");
            }
            quint32 holdID = pHoldingItem->data(0, Qt::UserRole).toList()[1].toUInt();
            THoldingMap::const_iterator itFind = (*curMap).find(holdID);
            if(itFind == (*curMap).end())
            {
                LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found holding in layouts map.");
            }
            else
                (*curMap).insert(holdID, bVal);
        }
    }

    if(pRestrictionParentItem)
    {
        for(int i = 0; i < pRestrictionParentItem->childCount(); ++i)
        {
            QTreeWidgetItem* pRestrictionTypeItem = pRestrictionParentItem->child(i);
            QString type = pRestrictionTypeItem->data(0, Qt::UserRole).toList()[1].toString();

            TFIRRestrictionMap::iterator curMap = m_mapRestriction.find(type);
            if(curMap == m_mapRestriction.end())
                continue;

            for(int j = 0; j < pRestrictionTypeItem->childCount(); ++j)
            {
                QTreeWidgetItem* pRestrictionItem = pRestrictionTypeItem->child(j);
                Qt::CheckState qState = pRestrictionItem->checkState(0);
                bool bVal = false;
                if(qState == Qt::Checked)
                    bVal = true;
                if(qState == Qt::PartiallyChecked)
                {
                    LOG_STR(Log4Qt::Level::DEBUG_INT, "Illegal state in layouts.");
                }
                qint32 restrictionID = pRestrictionItem->data(0, Qt::UserRole).toList()[1].toInt();
                TRestrictionMap::const_iterator itFind = (*curMap).find(restrictionID);
                if(itFind == (*curMap).end())
                {
                    LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found restriction in layouts map.");
                }
                else
                    (*curMap).insert(restrictionID, bVal);
            }
        }
    }

    if(pAreaParentItem)
    {
        TFIRAreas::iterator curMap = m_mapAreas.find(pFIRItem->data(0, Qt::UserRole).toList()[1].toString());
        if(curMap == m_mapAreas.end())
        {
            LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found area in layouts map.");
            return;
        }
        for(int i = 0; i < pAreaParentItem->childCount(); ++i)
        {
            QTreeWidgetItem* pAreaItem = pAreaParentItem->child(i);
            Qt::CheckState qState = pAreaItem->checkState(0);
            bool bVal = false;
            if(qState == Qt::Checked) bVal = true;
            if(qState == Qt::PartiallyChecked)
            {
                LOG_STR(Log4Qt::Level::DEBUG_INT, "Illegal state in layouts.");
            }
            QString areaName = pAreaItem->data(0, Qt::UserRole).toList()[1].toString();
            TMapArea::const_iterator itFind = (*curMap).find(areaName);
            if(itFind == (*curMap).end())
            {
                LOG_STR(Log4Qt::Level::DEBUG_INT, "Not found area in layouts map.");
            }
            else
                (*curMap).insert(areaName, bVal);
        }
    }
}

void LayoutDlg::SetFIRSSA(const QSharedPointer<Scene>& pFIR)
{
    if(pFIR)
    {
        TSSAMap mapSSA;
        Scene::TAirportsMap::const_iterator itAirport = pFIR->GetAirports().begin();
        for(; itAirport != pFIR->GetAirports().end(); ++itAirport)
        {
            CAirport::TSvgItems::ConstIterator itSvg = (*itAirport)->GetSvgItems().begin();
            for(; itSvg != (*itAirport)->GetSvgItems().end(); ++itSvg)
            {
                TSSAKey keySSA(QPair<quint32, quint32>((*itAirport)->GetID(), itSvg->data()->GetSvgItemID()), -1);
                mapSSA.insert(keySSA, IsSvgEnable(pFIR->GetIDName(), keySSA.first.first, keySSA.first.second));
            }
            CAirport::TRunways::const_iterator itRunway = (*itAirport)->GetRunways().begin();
            for(; itRunway != (*itAirport)->GetRunways().end(); ++itRunway)
            {
                CRunway::TSSA::const_iterator itSSA = (*itRunway)->GetSSA().begin();
                for(; itSSA != (*itRunway)->GetSSA().end(); ++itSSA)
                {
                    TSSAKey keySSA(QPair<quint32, quint32>((*itAirport)->GetID(), (*itRunway)->GetID()), (*itSSA)->GetID());
                    mapSSA.insert(keySSA, IsSSAEnable(pFIR->GetIDName(), keySSA.first.first, keySSA.first.second, keySSA.second));
                }
            }
        }
        m_mapSSA.insert(pFIR->GetIDName(), mapSSA);
    }
}

void LayoutDlg::SetFIRHolding(const QSharedPointer<Scene>& pFIR)
{
    if(pFIR)
    {
        THoldingMap mapHolding;
        Scene::THoldingList::const_iterator itHolding = pFIR->GetHolding().begin();
        for(; itHolding != pFIR->GetHolding().end(); ++itHolding)
        {
            mapHolding.insert((*itHolding)->GetID(), IsHoldingEnable(pFIR->GetIDName(), (*itHolding)->GetID()));
        }
        m_mapHolding.insert(pFIR->GetIDName(), mapHolding);
    }
}

void LayoutDlg::InsertFIRRestriction(const QSharedPointer<Scene> &pFIR, QTreeWidgetItem *parent)
{
    SetFIRRestriction(pFIR);

    if(!pFIR || !parent) return;

    QTreeWidgetItem* pParentItem = 0;
    for(int i = 0; i < parent->childCount(); ++i)
    {
        QTreeWidgetItem* pItem = parent->child(i);
        QVariantList data = pItem->data(0, Qt::UserRole).toList();
        if((data[0].toUInt() == Layout) && (data[1].toUInt() == Restriction))
            pParentItem = pItem;
    }
    if(!pParentItem) return;

    QVariantList qList;
    QTreeWidgetItem* pSystemItem = new QTreeWidgetItem(pParentItem);
    pSystemItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    AdvancedSelection(pSystemItem, Qt::Unchecked);
    pSystemItem->setText(0, QString("System"));
    qList.clear();
    qList.append(LayoutRestriction);
    qList.append(QString("system"));
    pSystemItem->setData(0, Qt::UserRole, qList);
    {
        CRestriction::TDescription::const_iterator itRestriction = CRestriction::TYPE_DESCRIPTION.begin();
        CRestriction::TDescription::const_iterator itEnd = CRestriction::TYPE_DESCRIPTION.end();
        for(; itRestriction != itEnd; ++itRestriction)
        {
            QTreeWidgetItem* pRestrictionItem = new QTreeWidgetItem(pSystemItem);
            pRestrictionItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
            AdvancedSelection(pRestrictionItem,
                              IsRestrictionEnable(QString("system"), itRestriction.key())
                              ? Qt::Checked : Qt::Unchecked);
            pRestrictionItem->setText(0, itRestriction.value());
            qList.clear();
            qList.append(LayoutRestriction);
            qList.append(itRestriction.key());
            pRestrictionItem->setData(0, Qt::UserRole, qList);
        }
    }

    pSystemItem = new QTreeWidgetItem(pParentItem);
    pSystemItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
    AdvancedSelection(pSystemItem, Qt::Unchecked);
    pSystemItem->setText(0, QString("User"));
    qList.clear();
    qList.append(LayoutRestriction);
    qList.append(QString("user"));
    pSystemItem->setData(0, Qt::UserRole, qList);
    {
        CRestrictionUser::TDescription::const_iterator itRestriction = CRestrictionUser::TYPE_DESCRIPTION.begin();
        CRestrictionUser::TDescription::const_iterator itEnd = CRestrictionUser::TYPE_DESCRIPTION.end();
        for(; itRestriction != itEnd; ++itRestriction)
        {
            QTreeWidgetItem* pRestrictionItem = new QTreeWidgetItem(pSystemItem);
            pRestrictionItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
            AdvancedSelection(pRestrictionItem,
                              IsRestrictionEnable(QString("user"), itRestriction.key())
                              ? Qt::Checked : Qt::Unchecked);
            pRestrictionItem->setText(0, itRestriction.value());
            qList.clear();
            qList.append(LayoutRestriction);
            qList.append(itRestriction.key());
            pRestrictionItem->setData(0, Qt::UserRole, qList);
        }
    }
    if(IsLayoutEnable(pFIR->GetIDName(), Restriction)) AdvancedSelection(pParentItem, Qt::Checked);
}

void LayoutDlg::SetFIRRestriction(const QSharedPointer<Scene> &pFIR)
{
    if(pFIR)
    {
        TRestrictionMap mapRestriction;
        {
            CRestrictionUser::TDescription::const_iterator itRestriction = CRestrictionUser::TYPE_DESCRIPTION.begin();
            CRestrictionUser::TDescription::const_iterator itEnd = CRestrictionUser::TYPE_DESCRIPTION.end();
            for(; itRestriction != itEnd; ++itRestriction)
            {
                mapRestriction.insert(itRestriction.key(), IsRestrictionEnable(QString("user"), itRestriction.key()));
            }
        }
        m_mapRestriction.insert(QString("user"), mapRestriction);

        mapRestriction.clear();
        {
            CRestriction::TDescription::const_iterator itRestriction = CRestriction::TYPE_DESCRIPTION.begin();
            CRestriction::TDescription::const_iterator itEnd = CRestriction::TYPE_DESCRIPTION.end();
            for(; itRestriction != itEnd; ++itRestriction)
            {
                mapRestriction.insert(itRestriction.key(), IsRestrictionEnable(QString("system"), itRestriction.key()));
            }
        }
        m_mapRestriction.insert(QString("system"), mapRestriction);
    }
}

void LayoutDlg::InsertFIRArea(const QSharedPointer<Scene> &pFIR, QTreeWidgetItem *parent)
{
    SetFIRArea(pFIR);

    if(!pFIR || !parent) return;

    QTreeWidgetItem* pParentItem = 0;
    for(int i = 0; i < parent->childCount(); ++i)
    {
        QTreeWidgetItem* pItem = parent->child(i);
        QVariantList data = pItem->data(0, Qt::UserRole).toList();
        if((data[0].toUInt() == Layout) && (data[1].toUInt() == Map))
            pParentItem = pItem;
    }
    if(!pParentItem) return;

    Scene::TRestrictionUserList::const_iterator itArea = pFIR->GetRestrictionUser().begin();
    for(; itArea != pFIR->GetRestrictionUser().end(); ++itArea)
    {
        if((*itArea)->GetType() == CRestrictionUser::enMap)
        {
            QTreeWidgetItem* pAreaItem = new QTreeWidgetItem(pParentItem);
            pAreaItem->setFlags(Qt::ItemIsEnabled|Qt::ItemIsUserCheckable|Qt::ItemIsSelectable);
            AdvancedSelection(pAreaItem,
                              IsAreaEnable(pFIR->GetIDName(), (*itArea)->GetName())
                              ? Qt::Checked : Qt::Unchecked);
            pAreaItem->setText(0, QString("%1").arg((*itArea)->GetName()));
            QVariantList qList;
            qList.append(LayoutMap);
            qList.append((*itArea)->GetName());
            pAreaItem->setData(0, Qt::UserRole, qList);
        }
    }
    if(IsLayoutEnable(pFIR->GetIDName(), Map)) AdvancedSelection(pParentItem, Qt::Checked);
}

void LayoutDlg::SetFIRArea(const QSharedPointer<Scene> &pFIR)
{
    if(pFIR)
    {
        TMapArea mapArea;
        Scene::TRestrictionUserList::const_iterator itArea = pFIR->GetRestrictionUser().begin();
        for(; itArea != pFIR->GetRestrictionUser().end(); ++itArea)
        {
            if((*itArea)->GetType() == CRestrictionUser::enMap)
                mapArea.insert((*itArea)->GetName(), IsAreaEnable(pFIR->GetIDName(), (*itArea)->GetName()));
        }
        m_mapAreas.insert(pFIR->GetIDName(), mapArea);
    }
}

void LayoutDlg::OthersCheck(const quint32 layoutType, const Qt::CheckState qState)
{
    for(int i = 0; i < treeWidget->topLevelItemCount(); ++i)
    {
        QTreeWidgetItem* pItem = treeWidget->topLevelItem(i);
        if(pItem->data(0, Qt::UserRole).toList()[0].toUInt() == Others)
        {
            for(int k = 0; k < pItem->childCount(); ++k)
            {
                if(pItem->child(k)->data(0, Qt::UserRole).toList()[0].toUInt() == FIR)
                {
                    QTreeWidgetItem* pFIRItem = pItem->child(k);
                    for(int m = 0; m < pFIRItem->childCount(); ++m)
                    {
                        if((pFIRItem->child(m)->data(0, Qt::UserRole).toList()[0].toUInt() == Layout) &&
                           (pFIRItem->child(m)->data(0, Qt::UserRole).toList()[1].toUInt() == layoutType))
                        {
                            AdvancedSelection(pFIRItem->child(m), qState);
                        }
                    }
                }
            }
        }
    }
}

void LayoutDlg::Load(QDataStream &in)
{
    in >> m_mapLayouts;
    in >> m_mapSSA;
    in >> m_mapHolding;
    in >> m_mapRestriction;
    in >> m_mapAreas;
}

void LayoutDlg::Save(QDataStream &out)
{
    out << m_mapLayouts;
    out << m_mapSSA;
    out << m_mapHolding;
    out << m_mapRestriction;
    out << m_mapAreas;
}
