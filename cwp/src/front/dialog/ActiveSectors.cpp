#include "ActiveSectors.h"

ActiveSectors::ActiveSectors(const Scene::TSceneList& SectorList, QWidget* pParent)
	: QDialog(pParent), sectorList(SectorList)
{
	setupUi(this);

	// Fill table
	SectorTable->clear();
	SectorTable->setRowCount(0);
	QStringList HeaderList;
	HeaderList << tr("Airspace center");
	HeaderList << tr("Controlled Airspace Name");
	HeaderList << tr("Active");

	SectorTable->setHorizontalHeaderLabels(HeaderList);

	Scene::TSceneList::const_iterator itSectorScan = sectorList.begin();
	int iIndex = 0;
	for(; itSectorScan != sectorList.end(); ++itSectorScan, ++iIndex)
	{
		QTableWidgetItem* pItem1 = new QTableWidgetItem((*itSectorScan)->GetIDName());
		pItem1->setData(Qt::UserRole, (*itSectorScan)->GetID());
		QTableWidgetItem* pItem2 = new QTableWidgetItem((*itSectorScan)->GetName());
		QTableWidgetItem* pItem3 = new QTableWidgetItem();
		//pItem3->setTextAlignment(Qt::AlignHCenter);
		pItem3->setFlags(Qt::ItemIsUserCheckable |
						 Qt::ItemIsSelectable |
						 //Qt::ItemIsEditable |
						 Qt::ItemIsEnabled);
		if ((*itSectorScan)->IsItemActive())
			pItem3->setCheckState(Qt::Checked);
		else
			pItem3->setCheckState(Qt::Unchecked);

		SectorTable->setRowCount(iIndex+1);
		SectorTable->setItem(iIndex, 0, pItem1);
		SectorTable->setItem(iIndex, 1, pItem2);
		SectorTable->setItem(iIndex, 2, pItem3);
	}
	SectorTable->horizontalHeader()->setResizeMode(QHeaderView::ResizeToContents);

}

void ActiveSectors::changeEvent(QEvent *event)
{
    //LanguageChange events should not be confused with LocaleChange events.
  if (event->type() == QEvent::LocaleChange) {
    // HERE we can un|install qtranslator
    //    Locale-Change events are generated by the system and tell the application,
    //    "Maybe you should load a new translation."
  } else if (event->type() == QEvent::LanguageChange) {
    //    LanguageChange events are generated by Qt and tell the application's widgets,
    //    "Maybe you should retranslate all your strings."
    retranslateUi(this);
  }

  QDialog::changeEvent(event);
}

void ActiveSectors::accept()
{
	Scene::TSceneList::const_iterator itSectorScan = sectorList.begin();
	for(; itSectorScan != sectorList.end(); ++itSectorScan)
		(*itSectorScan)->MarkItemActive(false);

	int iIndex = 0;
	for (; iIndex < SectorTable->rowCount(); ++iIndex)
	{
		if(SectorTable->item(iIndex, 2)->checkState() == Qt::Checked)
		{
			itSectorScan = sectorList.begin();
			for(; itSectorScan != sectorList.end(); ++itSectorScan)
			{
				if ((*itSectorScan)->GetID() == SectorTable->item(iIndex, 0)->data(Qt::UserRole).toUInt())
					(*itSectorScan)->MarkItemActive(true);
			}
		}
	}
	QDialog::accept();
}
