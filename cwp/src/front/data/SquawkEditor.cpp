#include "SquawkEditor.h"

#include "import/Zone.h"
#include "Coordinate.h"
#include "BoundaryPoint.h"

#include "TVAError.h"
#include "main.h"

#include "qtautotransaction.h"

#include <QMessageBox>
#include <QPushButton>
#include <QtGui/QCloseEvent>

#include <QtSql/QSqlRecord>
#include <QtSql/QSqlError>
#include <QtSql/QSqlRelationalTableModel>

const char SquawkEditor::DB_SQUAWK_ID[] = "id";
const char SquawkEditor::DB_SQUAWK_SQUAWK[] = "squawk";
const char SquawkEditor::DB_SQUAWK_ZONE_ID[] = "zone_id";

SquawkEditor::SquawkEditor(QWidget *parent) :
    QWidget(parent)
{
    setupUi(this);

    m_pTableModel = new QSqlRelationalTableModel(this);
    m_pTableModel->setTable("SQUAWK");
    m_pTableModel->setEditStrategy(QSqlTableModel::OnManualSubmit);
    m_mapModelIndex.insert(DB_SQUAWK_ID, m_pTableModel->fieldIndex(DB_SQUAWK_ID));
    m_mapModelIndex.insert(DB_SQUAWK_SQUAWK, m_pTableModel->fieldIndex(DB_SQUAWK_SQUAWK));
    m_mapModelIndex.insert(DB_SQUAWK_ZONE_ID, m_pTableModel->fieldIndex(DB_SQUAWK_ZONE_ID));
    m_pTableModel->setRelation(m_mapModelIndex[DB_SQUAWK_ZONE_ID], QSqlRelation("ZONE", "id", "name"));
    m_pTableModel->select();

    MainView->setModel(m_pTableModel);
    MainView->horizontalHeader()->moveSection(MainView->horizontalHeader()->visualIndex(m_mapModelIndex[DB_SQUAWK_ID]),
        0);
    MainView->horizontalHeader()->moveSection(MainView->horizontalHeader()->visualIndex(
        m_mapModelIndex[DB_SQUAWK_SQUAWK]), 1);
    MainView->horizontalHeader()->moveSection(MainView->horizontalHeader()->visualIndex(
        m_mapModelIndex[DB_SQUAWK_ZONE_ID]), 2);
    MainView->setColumnHidden(m_mapModelIndex[DB_SQUAWK_ID], true);
    MainView->setColumnHidden(m_mapModelIndex[DB_SQUAWK_ZONE_ID], true);
    MainView->horizontalHeader()->setResizeMode(QHeaderView::Interactive);
    MainView->resizeColumnsToContents();

    m_pModDelegate = QSharedPointer<CRelModifyDelegate> (new CRelModifyDelegate(MainView));
    connect(m_pTableModel, SIGNAL(dataChanged(QModelIndex,QModelIndex)), this, SLOT(OnViewActivate()));
    MainView->setItemDelegate(m_pModDelegate.data());

    CRelModifyDelegate::TColMap colMap;
    colMap.insert(m_mapModelIndex[DB_SQUAWK_ID], QVariant::UInt);
    colMap.insert(m_mapModelIndex[DB_SQUAWK_SQUAWK], QVariant::UInt);
    colMap.insert(m_mapModelIndex[DB_SQUAWK_ZONE_ID], QVariant::UInt);
    m_pModDelegate->SetColsType(colMap);

    // FIR combo
    QList<Zone> ZoneList;
    TVA_CATCHALL_TRY
        {
            dao()->LoadZones(ZoneList);
        }TVA_CATCHALL(err){
            QMessageBox::critical(this, tr("Zone"), err.reason());
}
QList<Zone>::const_iterator itZoneScan = ZoneList.begin();
for(; itZoneScan != ZoneList.end(); ++itZoneScan)
{
    if ((itZoneScan)->GetType() == Zone::enFIR)
    {
        FIRcombo->addItem(
                        itZoneScan->GetIDName() +
                        "(" + itZoneScan->GetName() + ")",
                        itZoneScan->GetID());
    }
}
FIRcombo->model()->sort(0);
FIRcombo->setCurrentIndex(0);
connect(FIRcombo, SIGNAL(currentIndexChanged(int)), this, SLOT(OnFIRChanged(int)));

Translate();

ActivateButtons(false);

connect(OperButtons, SIGNAL(clicked(QAbstractButton*)), this, SLOT(OnRuleButtons(QAbstractButton*)));
connect(AddButton, SIGNAL(clicked()), this, SLOT(OnAddRecord()));
connect(DeleteButton, SIGNAL(clicked()), this, SLOT(OnDeleteRecord()));

OnFIRChanged(0);
}

SquawkEditor::~SquawkEditor()
{

}

void SquawkEditor::Translate()
{
    m_pTableModel->setHeaderData(m_mapModelIndex[DB_SQUAWK_SQUAWK], Qt::Horizontal, tr("Squawk"));
    m_pTableModel->setHeaderData(m_mapModelIndex[DB_SQUAWK_ZONE_ID], Qt::Horizontal, tr("Zone"));
}

void SquawkEditor::changeEvent(QEvent* event)
{
    //LanguageChange events should not be confused with LocaleChange events.
    if (event->type() == QEvent::LocaleChange)
    {
        // HERE we can un|install qtranslator
        //    Locale-Change events are generated by the system and tell the application,
        //    "Maybe you should load a new translation."
    }
    else if (event->type() == QEvent::LanguageChange)
    {
        //    LanguageChange events are generated by Qt and tell the application's widgets,
        //    "Maybe you should retranslate all your strings."
        retranslateUi(this);
        Translate();
    }

    QWidget::changeEvent(event);
}

void SquawkEditor::closeEvent(QCloseEvent* pEvent)
{
    TVA_CATCHALL_TRY
        {
            if (OperButtons->button(QDialogButtonBox::Save)->isEnabled())
            {
                switch (QMessageBox::question(this, tr("Unsaved data"), tr("Save modified data?"), QMessageBox::Yes
                                | QMessageBox::No | QMessageBox::Cancel))
                {
                case QMessageBox::Yes:
                {
                    QtAutoTransaction transaction(QSqlDatabase::database());
                    if (!m_pTableModel->submitAll())
                    {
                        QMessageBox::critical(this, tr("Error"), m_pTableModel->lastError().text());
                        pEvent->ignore();
                    }
                    else
                    {
                        transaction.commit();
                        pEvent->accept();
                    }
                }
                    break;
                case QMessageBox::No:
                    pEvent->accept();
                    break;
                case QMessageBox::Cancel:
                    pEvent->ignore();
                    break;
                default:
                    break;
                }

            }
            else
                pEvent->accept();
        }TVA_CATCHALL(err){
    LOG_TVAERROR(Log4Qt::Level::ERROR_INT, err);
    QMessageBox::critical(this, tr("Error"), err.reason());
}
}

void SquawkEditor::OnAddRecord()
{
    if (m_qZoneID)
    {
        int iRow = m_pTableModel->rowCount();
        m_pTableModel->insertRow(iRow);
        QSqlRecord qRec = m_pTableModel->record(iRow);
        qRec.setValue(m_mapModelIndex[DB_SQUAWK_ZONE_ID], m_qZoneID);
        m_pTableModel->setRecord(iRow, qRec);
        QModelIndex qmIndex = m_pTableModel->index(iRow, m_mapModelIndex[DB_SQUAWK_SQUAWK]);
        MainView->setCurrentIndex(qmIndex);
        MainView->edit(qmIndex);
        ActivateButtons(true);
    }
}

void SquawkEditor::OnDeleteRecord()
{
    QModelIndexList SelectList = MainView->selectionModel()->selection().indexes();
    QModelIndexList::iterator itIndScan = SelectList.begin();
    for (; itIndScan != SelectList.end(); ++itIndScan)
    {
        if (itIndScan->isValid())
        {
            m_pTableModel->removeRow(itIndScan->row());
            ActivateButtons(true);
        }
    }
}

void SquawkEditor::OnRuleButtons(QAbstractButton* pButton)
{
    TVA_CATCHALL_TRY
        {
            QDialogButtonBox::ButtonRole BtnRole = OperButtons->buttonRole(pButton);
            switch (BtnRole)
            {
            case QDialogButtonBox::AcceptRole:
            {
                QtAutoTransaction transaction(QSqlDatabase::database());
                TVA_CHECK(
                                m_pTableModel->submitAll(),
                                m_pTableModel->lastError().text(),
                                E_FAIL);
                transaction.commit();
                ActivateButtons(false);
            }
                break;
            case QDialogButtonBox::RejectRole:
            case QDialogButtonBox::DestructiveRole:
                m_pTableModel->revertAll();
                m_pTableModel->submitAll();
                ActivateButtons(false);
                break;
            default:
                break;
            }
        }TVA_CATCHALL(err){
    LOG_TVAERROR(Log4Qt::Level::ERROR_INT, err);
    QMessageBox::critical(this, tr("Error"), err.reason());
}
}

void SquawkEditor::OnViewActivate()
{
    ActivateButtons(true);
}

void SquawkEditor::ActivateButtons(bool bActive)
{
    OperButtons->button(QDialogButtonBox::Save)->setEnabled(bActive);
    if(OperButtons->button(QDialogButtonBox::Discard))
        OperButtons->button(QDialogButtonBox::Discard)->setEnabled(bActive);
    if(OperButtons->button(QDialogButtonBox::Cancel))
        OperButtons->button(QDialogButtonBox::Cancel)->setEnabled(bActive);
}

void SquawkEditor::OnFIRChanged(int iIndex)
{
    if ((iIndex != -1) && (iIndex < FIRcombo->count()))
    {
        m_pTableModel->setFilter("zone_id = " + FIRcombo->itemData(iIndex).toString());
        m_qZoneID = FIRcombo->itemData(iIndex).toUInt();
    }
    else
    {
        m_pTableModel->setFilter("0 = 1");
        m_qZoneID = 0;
    }
    m_pTableModel->select();
}
