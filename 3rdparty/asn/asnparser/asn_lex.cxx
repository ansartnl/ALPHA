/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>

#ifdef _MSC_VER
#pragma warning(disable:4244 4505 4706 4701)
#endif

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include "unistd.h"

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state* YY_BUFFER_STATE;

extern int yyleng;
extern FILE* yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if ( condition_holds )
 *      yyless( 5 );
 *  else
 *      do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
    { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        YY_RESTORE_YY_MORE_OFFSET \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state {
    FILE* yy_input_file;

    char* yy_ch_buf;        /* input buffer */
    char* yy_buf_pos;       /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;      /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char* yy_c_buf_p = (char*) 0;
static int yy_init = 1;     /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO((FILE* input_file));

void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE* file, int size));
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE* file));
void yy_flush_buffer YY_PROTO((YY_BUFFER_STATE b));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO((char* base, yy_size_t size));
YY_BUFFER_STATE yy_scan_string YY_PROTO((yyconst char* yy_str));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO((yyconst char* bytes, int len));

static void* yy_flex_alloc YY_PROTO((yy_size_t));
static void* yy_flex_realloc YY_PROTO((void*, yy_size_t));
static void yy_flex_free YY_PROTO((void*));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
        if ( ! yy_current_buffer ) \
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
        if ( ! yy_current_buffer ) \
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE* yyin = (FILE*) 0, *yyout = (FILE*) 0;
typedef int yy_state_type;
extern char* yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((yyconst char msg[]));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
    yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 121
#define YY_END_OF_BUFFER 122
static yyconst short int yy_accept[581] = {
    0,
    0,    0,    0,    0,    0,    0,    0,    0,  122,  120,
    118,  119,   92,  120,  120,  110,   96,   97,  104,  102,
    106,  103,  107,  105,  113,  108,  101,   98,  109,   99,
    90,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    94,   95,  111,  114,   91,  100,   93,   82,   81,   82,
    89,  121,   89,   89,   88,   88,   88,    0,  112,  116,
    115,   79,  113,    0,    0,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,   12,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

    117,  117,  117,  117,  117,  117,  117,  117,  117,   53,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    0,  114,   80,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  116,    0,  115,   83,    1,  117,    4,    5,
    117,  117,  117,    9,  117,  117,  117,  117,  117,  117,
    117,  117,  117,   23,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    45,   46,  117,  117,  117,  117,  117,  117,   55,  117,
    117,  117,  117,  117,  117,   62,  117,  117,  117,  117,

    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    84,    0,   87,   86,    0,  112,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,   30,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    117,   49,  117,  117,  117,  117,  117,  117,  117,  117,
    60,  117,   63,  117,  117,  117,   67,   69,   70,  117,
    117,  117,  117,  117,  117,  117,  117,   78,    0,    0,
    86,  117,  117,  117,  117,    8,  117,  117,  117,  117,
    15,  117,  117,  117,  117,  117,  117,  117,  117,  117,

    117,   29,  117,  117,  117,  117,  117,  117,  117,  117,
    117,  117,  117,   44,  117,  117,  117,  117,   52,  117,
    0,  117,  117,  117,  117,  117,  117,  117,    0,  117,
    71,  117,  117,  117,   75,  117,  117,    0,    2,  117,
    117,  117,  117,  117,  117,   14,  117,  117,  117,  117,
    117,  117,  117,   25,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,    0,  117,
    117,   51,  117,  117,  117,  117,  117,  117,   64,   65,
    117,  117,  117,   72,  117,  117,  117,  117,    0,  117,
    117,  117,  117,   11,  117,  117,  117,   19,   20,  117,

    117,  117,  117,   27,  117,  117,  117,  117,  117,  117,
    38,  117,  117,   41,  117,  117,  117,  117,  117,  117,
    117,   57,   59,  117,  117,  117,  117,  117,  117,  117,
    117,  117,    0,  117,  117,  117,  117,  117,  117,  117,
    117,   22,  117,   26,   28,  117,  117,  117,  117,  117,
    37,   39,   40,  117,  117,  117,   48,  117,   54,  117,
    117,   61,  117,  117,  117,  117,  117,  117,  117,    0,
    0,  117,    7,   10,   13,   16,  117,  117,  117,  117,
    117,  117,   34,  117,  117,  117,  117,  117,  117,  117,
    66,  117,  117,   73,  117,  117,  117,    0,  117,  117,

    17,  117,  117,   24,  117,  117,  117,   36,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,    0,
    117,    6,   18,   21,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,   85,  117,
    117,  117,  117,   42,   43,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,   31,  117,   32,  117,   50,
    56,  117,  117,   68,  117,  117,   77,  117,  117,   47,
    117,  117,  117,   76,    3,   33,   58,   35,   74,    0
} ;

static yyconst int yy_ec[256] = {
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    4,    5,    1,    1,    1,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,   17,   16,
    16,   18,   19,   20,   16,   16,   16,   21,   22,   23,
    24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
    53,    1,   54,   55,   56,    1,   57,   58,   59,   60,

    61,   62,   63,   64,   65,   62,   62,   66,   67,   68,
    69,   70,   62,   71,   72,   73,   74,   75,   62,   76,
    62,   77,   78,   79,   80,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1
} ;

static yyconst int yy_meta[81] = {
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    3,    1,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    1,    1,    4,    4,    4,    4,
    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
    4,    4,    1,    1,    1,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    1,    1
} ;

static yyconst short int yy_base[592] = {
    0,
    0,    0,   78,   79,   80,   81,  106,  156, 1313, 1314,
    1314, 1314, 1314, 1307,  182, 1314, 1314, 1314, 1314, 1314,
    1314, 1298, 1314, 1314,   69, 1289, 1314, 1314, 1314, 1314,
    1314,   82,  247,   77,   81,  222,   86,  101, 1296,  250,
    90,  223,  271,  263,   85,  274,  291,  254,  252,   84,
    1314, 1314, 1314, 1295, 1314, 1314, 1314, 1314, 1314, 1294,
    1314, 1314, 1293, 1260, 1314, 1291,  340, 1298, 1297, 1288,
    1287, 1276,  147, 1274, 1284, 1283,   83,   88,  110,  224,
    114,  258,  256,  268,   80, 1282,  299,  155,  293,  260,
    255,  301,  295,  283,   91,  261,  262,  156,  314,  302,

    317,  310,  405,  303,  315,  326,  352,  407,  380, 1281,
    381,  382,  409,  410,  408,  323,  411,  412,  415,  418,
    157,  416,  419,  420,  272,  425,  422,  423,  424,  426,
    1280, 1279, 1314, 1278, 1250, 1276,  483, 1274,    0,    0,
    1282, 1273, 1272, 1271, 1270, 1314, 1314,  434, 1269, 1268,
    429,  427,  435, 1267,  431,  433,  437,  439,  438,  440,
    450,  464,  462, 1266,  465,  472,  523,  475,  456,  466,
    476,  473,  494,  525,  528,  529,  527,  477,  158,  531,
    1265,  532,  533,  534,  487,  537,  539,  536, 1264,  538,
    540,  541,  489,  542,  543, 1263,  545,  546,  549,  561,

    564,  565,  569,  550,  571,  163,  573,  574,  575,  579,
    1314, 1258, 1314, 1261, 1268, 1267,  578,  580,  581,  584,
    585,  586,  590,  588,  597,  589,  591,  592,  594,  604,
    336,  614,  595,  615,  609,  616,  617, 1258,  618,  620,
    623,  626,  629,  630,  633,  634,  638,  636,  642,  643,
    639, 1257,  644,  649,  645,  652, 1256,  650,  660,  653,
    1255,  655, 1254,  654,  663,  656, 1253, 1252, 1251,  657,
    662,  664,  666,  679,  682,  685,  686, 1250, 1248, 1248,
    1247,  687,  690,  691,  692, 1246,  688,  694,  693,  696,
    1245,  695,  697,  699,  701,  479,  703,  705,  710,  711,

    712, 1244,  715,  718,  721,  725,  729,  730,  732,  733,
    735,  736,  160, 1243, 1242,  740,  737,  742, 1241,  750,
    743,  751,  748,  752,  755,  754,  756,  757,  758,  761,
    1240,  766,  764,  767, 1239,  769,  771, 1207, 1237,  772,
    773,  783,  776,  785,  786, 1236,  790,  791,  794,  797,
    798,  792,  799, 1235,  800,  801,  803,  802,  804,  806,
    807,  818,  811,  820,  821,  823,  830,  832,  834,  835,
    836, 1234,  839,  841,  842,  844,  845,  849, 1233, 1232,
    846,  852,  847, 1231,  851,  857,  859,  860, 1182,  861,
    866,  867,  870, 1229,  873,  874,  871, 1228, 1227,  878,

    879,  872,  876, 1226,  877,  880,  881,  884,  892,  885,
    1225,  887,  886, 1224,  895,  888,  897,  903,  906,  915,
    917, 1223, 1222,  920,  923,  921,  926,  922,  928,  927,
    929,  931, 1167, 1220,  933,  934,  935,  937,  945,  943,
    946, 1218,  947, 1209, 1206,  949,  951,  952,  953,  957,
    1203, 1200, 1181,  956,  958,  960, 1180,  959, 1179,  961,
    962, 1177,  964,  966,  967,  969,  972,  981,  977, 1118,
    986,  980, 1173, 1171, 1170,  988,  982,  984,  987,  990,
    991,  995, 1169,  997,  999,  998, 1001,  996, 1002, 1006,
    1168, 1007, 1005, 1167, 1017, 1022, 1026, 1102, 1024, 1030,

    1161, 1034, 1032, 1160, 1031, 1033, 1035, 1157, 1041, 1036,
    1043, 1042, 1044, 1045, 1046, 1047, 1052, 1055, 1056, 1106,
    1058, 1153, 1150, 1149, 1059, 1060, 1061, 1065, 1067, 1073,
    1071, 1074, 1072, 1077, 1076, 1075, 1086, 1079, 1314, 1078,
    1089, 1088, 1097, 1146, 1145, 1090, 1098, 1081, 1100, 1102,
    1101, 1103, 1104, 1106, 1115, 1144, 1109, 1143, 1120, 1142,
    1141, 1110, 1118, 1137, 1121, 1122,  485, 1125, 1127,  481,
    1128, 1135, 1132,  342,  334,  166,  164,   89,   87, 1314,
    1195, 1199, 1203, 1207, 1210, 1213, 1216, 1219, 1221, 1225,
    1228

} ;

static yyconst short int yy_def[592] = {
    0,
    580,    1,  581,  581,  582,  582,  583,  583,  580,  580,
    580,  580,  580,  584,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    580,  580,  580,  586,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  584,  580,  587,
    588,  580,  580,  580,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    586,  586,  580,  580,  580,  580,   67,  589,   67,   67,
    590,  587,  587,  588,  588,  580,  580,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    580,  580,  580,  591,  590,  580,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  580,  591,
    591,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  580,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  580,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  580,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  580,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  580,  585,  585,

    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  580,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  580,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
    585,  585,  585,  585,  585,  585,  585,  585,  585,    0,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580

} ;

static yyconst short int yy_nxt[1395] = {
    0,
    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   25,   25,   25,   25,
    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
    36,   37,   38,   39,   40,   39,   39,   39,   41,   42,
    43,   44,   39,   45,   46,   47,   48,   49,   50,   39,
    39,   39,   51,   52,   53,   10,   54,   54,   54,   54,
    54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
    54,   54,   54,   54,   54,   54,   54,   55,   56,   57,
    59,   59,   62,   62,   73,   73,   73,   73,   73,   75,
    60,   60,   75,   75,   75,   75,   75,   75,   75,   75,

    75,   75,   75,   75,   63,   63,   64,   64,   62,   77,
    87,   90,   94,   75,   88,  116,  103,   89,  130,   78,
    156,   79,   75,   80,  104,  149,   75,  148,   81,   95,
    66,  170,   67,   67,   67,   67,   67,   67,   67,   67,
    67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
    67,   67,   67,   67,   67,   67,   67,   67,   62,  152,
    150,   96,   73,   73,   73,   73,   73,   75,   75,   75,
    75,   97,   75,  200,  173,   75,   75,  248,   75,  368,
    66,  159,   67,   67,   67,   67,   67,   67,   67,   67,
    67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

    67,   67,   67,   67,   67,   67,   67,   67,   70,   70,
    70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
    70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
    70,   70,   70,   70,   75,   75,   75,  274,   71,   71,
    71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
    71,   71,   71,   71,   71,   71,   71,   71,   71,   75,
    91,   92,   75,  105,   75,  151,   75,   75,   75,  106,
    75,   93,   75,   75,   75,   75,   98,   82,  128,   99,
    75,   83,  163,   75,   75,   84,   75,   85,  100,  101,
    153,  162,  112,  126,  102,   75,  107,   86,  108,  109,

    113,  154,  110,   75,  117,   75,  114,   75,  118,  155,
    121,   75,  111,   75,   75,   75,  129,  122,  172,  119,
    169,  127,   75,  166,  120,  157,   75,   75,  171,   75,
    164,  160,  161,  115,  123,   75,  167,  204,   75,  158,
    168,  124,  182,  175,  174,  176,   75,  165,   75,  194,
    179,  125,  137,  138,   75,  139,  139,  139,  139,  139,
    183,  177,  178,  184,   75,  296,  140,  140,  140,  140,
    140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
    140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
    140,  140,   75,   75,   75,  139,  139,  139,  139,  139,

    139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
    139,  139,  139,  139,  139,  139,  139,   75,  185,   75,
    75,   75,   75,   75,   75,  187,  188,   75,   75,  189,
    75,   75,   75,  180,   75,   75,   75,   75,   75,   75,
    191,   75,  186,   75,  192,   75,   75,   75,  201,   75,
    75,   75,   75,  195,  181,  190,  196,  199,  198,  205,
    207,  203,   75,  197,  217,  202,  219,  220,   75,  221,
    223,  210,  193,  225,   75,  222,   75,   75,   75,  218,
    224,  227,  226,  208,   75,   75,  206,   75,   75,   75,
    229,   75,  231,   75,  228,  209,  580,   75,  230,   75,

    237,   75,  233,  232,  238,  236,   75,  247,  352,  139,
    139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
    139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
    139,  139,  139,  139,  139,   75,  239,   75,  241,   75,
    75,   75,  240,   75,   75,   75,   75,  253,   75,   75,
    75,   75,   75,   75,   75,   75,  260,   75,   75,  251,
    234,   75,   75,  235,  242,  243,  245,  254,  244,  255,
    256,  252,  246,   75,  249,  263,   75,   75,  250,  261,
    264,   75,  257,   75,  258,   75,   75,   75,  259,  262,
    75,   75,   75,   75,  265,  268,   75,   75,   75,  269,

    75,   75,   75,   75,   75,  266,   75,   75,  267,   75,
    270,  271,  278,  272,  289,  284,   75,  282,  273,  275,
    288,   75,  285,  283,  286,  290,   75,   75,   75,   75,
    75,  292,   75,  291,  276,   75,  298,  293,   75,  277,
    294,   75,   75,  295,  297,   75,   75,  302,   75,  299,
    75,   75,  300,  313,   75,   75,   75,   75,  287,  301,
    310,   75,   75,  307,   75,   75,   75,   75,   75,   75,
    311,  306,   75,  308,   75,   75,   75,  318,   75,  309,
    322,  312,  314,  304,  316,  325,  323,  315,  303,  327,
    319,   75,  320,  326,   75,  305,  333,   75,   75,   75,

    75,  331,   75,   75,   75,   75,   75,   75,   75,   75,
    332,   75,  335,   75,  317,   75,  340,   75,  342,  341,
    344,  345,   75,   75,   75,  324,  346,   75,  328,  330,
    75,  350,  339,   75,  347,  351,  349,   75,  355,  334,
    348,   75,   75,  337,   75,   75,  353,   75,   75,   75,
    354,  357,   75,  336,   75,   75,  356,  362,  343,  361,
    75,  364,   75,   75,   75,  366,   75,   75,   75,   75,
    75,  358,  365,   75,  370,  363,   75,  374,   75,   75,
    367,   75,  359,   75,   75,   75,  379,  372,   75,  373,
    375,  360,  382,  376,  378,   75,  384,   75,   75,  391,

    390,  371,   75,   75,   75,  380,   75,  385,  377,   75,
    75,   75,   75,   75,   75,   75,   75,  397,   75,   75,
    396,  383,  401,   75,  394,  402,  399,  381,  392,  405,
    75,  395,   75,   75,  403,   75,  388,  386,  409,  398,
    393,  387,   75,  400,   75,  404,   75,   75,   75,  413,
    412,   75,  410,   75,   75,  411,   75,   75,   75,   75,
    415,   75,  407,   75,   75,  420,  414,  406,  417,   75,
    408,   75,   75,   75,  423,  418,  416,  425,   75,   75,
    421,  427,   75,   75,   75,   75,   75,  422,   75,   75,
    75,   75,   75,   75,  419,  429,   75,   75,   75,   75,

    75,  436,  424,  438,   75,  440,  434,   75,  442,   75,
    426,  435,  441,  439,  445,   75,  453,  443,   75,  431,
    432,  444,  428,  454,  446,  448,  450,   75,  430,   75,
    451,  452,   75,   75,   75,   75,  456,  437,   75,   75,
    75,   75,  457,   75,  447,   75,   75,   75,  460,   75,
    458,  449,  459,  462,  466,   75,  464,   75,   75,   75,
    455,   75,  473,   75,   75,   75,  465,  472,   75,   75,
    75,   75,   75,   75,   75,  469,   75,  479,   75,   75,
    475,   75,  477,  467,   75,  461,  478,  484,  463,   75,
    476,  487,   75,   75,   75,  489,   75,  474,   75,   75,

    75,  485,   75,   75,  468,  492,  494,   75,   75,   75,
    75,   75,  502,   75,   75,  483,  504,   75,   75,   75,
    500,  480,  490,  503,  482,  496,  491,  481,  486,   75,
    499,  488,  501,  509,   75,  511,   75,  495,   75,  493,
    508,  513,   75,   75,   75,   75,   75,   75,   75,  497,
    514,  506,  515,   75,   75,   75,   75,   75,   75,   75,
    505,  517,  510,  523,   75,  507,  512,   75,   75,  522,
    75,   75,   75,   75,  521,  516,  524,   75,  532,   75,
    534,  528,  530,   75,   75,   75,   75,   75,   75,   75,
    75,   75,  526,   75,  518,  525,  519,  540,   75,  527,

    75,   75,   75,  529,  544,  542,  531,  546,  550,   75,
    75,  535,   75,   75,   75,   75,   75,  533,   75,  548,
    538,   75,   75,  555,  536,  537,  541,   75,  543,  545,
    75,  561,   75,   75,   75,  559,  563,   75,  547,   75,
    75,  568,  549,  551,   75,  552,  554,   75,  572,   75,
    553,  556,  557,   75,   75,   75,   75,   75,   75,  558,
    560,   75,   75,  564,  562,   75,  539,  565,  567,   75,
    570,  566,   75,   75,  575,  569,  520,  571,  578,   75,
    75,   75,   75,   75,  574,   75,  498,  576,  573,   75,
    577,   75,   75,   75,  579,   58,   58,   58,   58,   61,

    61,   61,   61,   65,   65,   65,   65,   68,   68,   68,
    68,   76,   75,   76,  132,   75,  132,  143,   75,  143,
    145,   75,  145,  214,  214,  215,  215,  215,  215,  281,
    75,  281,  471,  470,   75,   75,   75,   75,   75,   75,
    75,   75,  433,   75,   75,   75,   75,   75,   75,   75,
    389,   75,   75,   75,  369,   75,   75,   75,   75,  280,
    280,  338,   75,  329,   75,   75,   75,   75,  321,   75,
    75,  141,  216,  280,  279,   75,   75,   75,   75,   75,
    75,   75,  144,  144,  142,  142,  216,  138,  213,  212,
    211,  131,  131,   75,   75,   75,   75,  147,  146,  144,

    142,  141,   69,  136,  135,  134,  133,  131,   75,   74,
    72,   69,  580,    9,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580

} ;

static yyconst short int yy_chk[1395] = {
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    4,    5,    6,   25,   25,   25,   25,   25,   34,
    3,    4,   85,   35,   32,   77,   50,   45,   37,  579,

    78,  578,   41,   95,    5,    6,    5,    6,    7,   32,
    34,   35,   37,   38,   34,   45,   41,   34,   50,   32,
    85,   32,   79,   32,   41,   78,   81,   77,   32,   37,
    7,   95,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    8,   81,
    79,   38,   73,   73,   73,   73,   73,   88,   98,  121,
    179,   38,  313,  121,   98,  206,  577,  179,  576,  313,
    8,   88,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

    8,    8,    8,    8,    8,    8,    8,    8,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   36,   42,   80,  206,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   33,
    36,   36,   40,   42,   49,   80,   48,   91,   83,   42,
    82,   36,   90,   96,   97,   44,   40,   33,   49,   40,
    84,   33,   91,   43,  125,   33,   46,   33,   40,   40,
    82,   90,   44,   48,   40,   94,   42,   33,   43,   43,

    44,   83,   43,   47,   46,   89,   44,   93,   46,   84,
    47,   87,   43,   92,  100,  104,   49,   47,   97,   46,
    94,   48,  102,   93,   46,   87,   99,  105,   96,  101,
    92,   89,   89,   44,   47,  116,   93,  125,  106,   87,
    93,   47,  104,  100,   99,  101,  575,   92,  231,  116,
    102,   47,   67,   67,  574,   67,   67,   67,   67,   67,
    105,  101,  101,  106,  107,  231,   67,   67,   67,   67,
    67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
    67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
    67,   67,  109,  111,  112,   67,   67,   67,   67,   67,

    67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
    67,   67,   67,   67,   67,   67,   67,  103,  107,  108,
    115,  113,  114,  117,  118,  109,  111,  119,  122,  112,
    120,  123,  124,  103,  127,  128,  129,  126,  130,  152,
    114,  151,  108,  155,  114,  156,  148,  153,  122,  157,
    159,  158,  160,  117,  103,  113,  117,  120,  119,  126,
    128,  124,  161,  118,  148,  123,  151,  152,  169,  153,
    156,  130,  115,  158,  163,  155,  162,  165,  170,  148,
    157,  160,  159,  129,  166,  172,  127,  168,  171,  178,
    162,  296,  163,  570,  161,  129,  137,  567,  162,  185,

    169,  193,  166,  165,  170,  168,  173,  178,  296,  137,
    137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
    137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
    137,  137,  137,  137,  137,  167,  171,  174,  173,  177,
    175,  176,  172,  180,  182,  183,  184,  185,  188,  186,
    190,  187,  191,  192,  194,  195,  193,  197,  198,  183,
    167,  199,  204,  167,  174,  175,  176,  186,  175,  187,
    188,  184,  177,  200,  180,  197,  201,  202,  182,  194,
    198,  203,  190,  205,  191,  207,  208,  209,  192,  195,
    217,  210,  218,  219,  199,  202,  220,  221,  222,  203,

    224,  226,  223,  227,  228,  200,  229,  233,  201,  225,
    204,  205,  210,  205,  224,  219,  230,  217,  205,  207,
    223,  235,  220,  218,  221,  225,  232,  234,  236,  237,
    239,  227,  240,  226,  208,  241,  233,  228,  242,  209,
    229,  243,  244,  230,  232,  245,  246,  237,  248,  234,
    247,  251,  235,  248,  249,  250,  253,  255,  222,  236,
    246,  254,  258,  243,  256,  260,  264,  262,  266,  270,
    247,  242,  259,  244,  271,  265,  272,  254,  273,  245,
    258,  247,  249,  240,  251,  262,  259,  250,  239,  265,
    255,  274,  256,  264,  275,  241,  273,  276,  277,  282,

    287,  271,  283,  284,  285,  289,  288,  292,  290,  293,
    272,  294,  275,  295,  253,  297,  283,  298,  285,  284,
    288,  289,  299,  300,  301,  260,  290,  303,  266,  270,
    304,  295,  282,  305,  292,  295,  294,  306,  299,  274,
    293,  307,  308,  277,  309,  310,  297,  311,  312,  317,
    298,  301,  316,  276,  318,  321,  300,  307,  287,  306,
    323,  309,  320,  322,  324,  311,  326,  325,  327,  328,
    329,  303,  310,  330,  316,  308,  333,  321,  332,  334,
    312,  336,  304,  337,  340,  341,  326,  318,  343,  320,
    322,  305,  329,  323,  325,  342,  332,  344,  345,  341,

    340,  317,  347,  348,  352,  327,  349,  333,  324,  350,
    351,  353,  355,  356,  358,  357,  359,  348,  360,  361,
    347,  330,  352,  363,  344,  353,  350,  328,  342,  357,
    362,  345,  364,  365,  355,  366,  337,  334,  361,  349,
    343,  336,  367,  351,  368,  356,  369,  370,  371,  365,
    364,  373,  362,  374,  375,  363,  376,  377,  381,  383,
    367,  378,  359,  385,  382,  373,  366,  358,  369,  386,
    360,  387,  388,  390,  376,  370,  368,  378,  391,  392,
    374,  382,  393,  397,  402,  395,  396,  375,  403,  405,
    400,  401,  406,  407,  371,  385,  408,  410,  413,  412,

    416,  392,  377,  395,  409,  397,  390,  415,  401,  417,
    381,  391,  400,  396,  405,  418,  413,  402,  419,  387,
    388,  403,  383,  415,  406,  407,  409,  420,  386,  421,
    410,  412,  424,  426,  428,  425,  417,  393,  427,  430,
    429,  431,  418,  432,  406,  435,  436,  437,  421,  438,
    419,  408,  420,  425,  429,  440,  427,  439,  441,  443,
    416,  446,  436,  447,  448,  449,  428,  435,  454,  450,
    455,  458,  456,  460,  461,  432,  463,  443,  464,  465,
    438,  466,  440,  430,  467,  424,  441,  450,  426,  469,
    439,  456,  472,  468,  477,  460,  478,  437,  471,  479,

    476,  454,  480,  481,  431,  464,  466,  482,  488,  484,
    486,  485,  477,  487,  489,  449,  479,  493,  490,  492,
    472,  446,  461,  478,  448,  468,  463,  447,  455,  495,
    471,  458,  476,  485,  496,  487,  499,  467,  497,  465,
    484,  489,  500,  505,  503,  506,  502,  507,  510,  469,
    490,  481,  492,  509,  512,  511,  513,  514,  515,  516,
    480,  495,  486,  502,  517,  482,  488,  518,  519,  500,
    521,  525,  526,  527,  499,  493,  503,  528,  513,  529,
    515,  509,  511,  531,  533,  530,  532,  536,  535,  534,
    540,  538,  506,  548,  496,  505,  497,  521,  537,  507,

    542,  541,  546,  510,  528,  526,  512,  530,  534,  543,
    547,  516,  549,  551,  550,  552,  553,  514,  554,  532,
    519,  557,  562,  540,  517,  518,  525,  555,  527,  529,
    563,  548,  559,  565,  566,  546,  550,  568,  531,  569,
    571,  555,  533,  535,  573,  536,  538,  572,  563,  564,
    537,  541,  542,  561,  560,  558,  556,  545,  544,  543,
    547,  524,  523,  551,  549,  522,  520,  552,  554,  508,
    559,  553,  504,  501,  568,  557,  498,  562,  572,  494,
    491,  483,  475,  474,  566,  473,  470,  569,  565,  462,
    571,  459,  457,  453,  573,  581,  581,  581,  581,  582,

    582,  582,  582,  583,  583,  583,  583,  584,  584,  584,
    584,  585,  452,  585,  586,  451,  586,  587,  445,  587,
    588,  444,  588,  589,  589,  590,  590,  590,  590,  591,
    442,  591,  434,  433,  423,  422,  414,  411,  404,  399,
    398,  394,  389,  384,  380,  379,  372,  354,  346,  339,
    338,  335,  331,  319,  315,  314,  302,  291,  286,  281,
    280,  279,  278,  269,  268,  267,  263,  261,  257,  252,
    238,  216,  215,  214,  212,  196,  189,  181,  164,  154,
    150,  149,  145,  144,  143,  142,  141,  138,  136,  135,
    134,  132,  131,  110,   86,   76,   75,   74,   72,   71,

    70,   69,   68,   66,   64,   63,   60,   54,   39,   26,
    22,   14,    9,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    580,  580,  580,  580

} ;

static yy_state_type yy_last_accepting_state;
static char* yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char* yytext;
#line 1 "asn_lex.l"
#define INITIAL 0
#line 2 "asn_lex.l"

/*
 * asn_lex.l
 *
 * ASN lexical analysis file
 *
 * ASN.1 compiler to produce C++ classes.
 *
 * Copyright (c) 1997-1999 Equivalence Pty. Ltd.
 *
 * Copyright (c) 2001 Institute for Information Industry, Taiwan, Republic of China
 * (http://www.iii.org.tw/iiia/ewelcome.htm)
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is ASN Parser.
 *
 * The Initial Developer of the Original Code is Equivalence Pty. Ltd.
 *
 * Portions of this code were written with the assisance of funding from
 * Vovida Networks, Inc. http://www.vovida.com.
 *
 * Portions are Copyright (C) 1993 Free Software Foundation, Inc.
 * All Rights Reserved.
 *
 *
 * Contributor(s): ___________________.
 *
 * $Log: asn_lex.l,v $
 * Revision 1.4  2002/07/02 02:03:25  mangelo
 * Remove Pwlib dependency
 *
 * Revision 1.3  2001/09/07 22:36:49  mangelo
 * add Log keyword substitution
 *
 *
 * March, 2001. Huang-Ming Huang
 *            Add support for Information Object Class.
 */

#include "main.h"
#include "asn_grammar.h"
#include <ctype.h>

#define FALSE 0
#define TRUE  1

#define YY_NEVER_INTERACTIVE 1

extern FILE* yyin;

extern unsigned lineNumber;

extern int LexEcho;
#define YYDEBUG 1
#define YY_USER_ACTION if (LexEcho) std::cout << yytext << std::flush;


int ReferenceTokenContext /* = MODULEREFERENCE */;
int IdentifierTokenContext = IDENTIFIER;
int BraceTokenContext = '{';
int NullTokenContext = NULL_TYPE;
int InMacroContext = FALSE;
int HasObjectTypeMacro = FALSE;
int InMIBContext = FALSE;
int InWithSyntaxContext = FALSE;
int InObjectSetContext = FALSE;
const ObjectClassBase* InformationFromObjectContext = NULL;
int InOIDContext ;
int ParsingConstructedType = FALSE;



extern "C" int yywrap() { return 1; }

static int IsUpper(const char* text) {
    for (const char* p = text; *p != NULL; ++p)
        if (!(isupper(*p) || *p == '-' || *p == '_'))
            return FALSE;
    return TRUE;
}

static int TokenSelect(int context, int token1, int token2) {
    if (context)
        return token1;
    yylval.sval = new std::string(yytext);
    return token2;
}

static int Is_WORD() {
    return (InWithSyntaxContext ||
            (!classStack->empty() && classStack->top()->HasLiteral(yytext)))
           && !ParsingConstructedType;
}

static int GetUpperCaseToken(const char* text) {
    int result;
    if (DummyParameters && (result = DummyParameters->GetIdentifierType(text)) != -1)
        return result;

    if (Module) {
        if ((result = Module->GetIdentifierType(text)) != -1)
            return result;
        else if (((InWithSyntaxContext && IsUpper(text)) || (!classStack->empty() && classStack->top()->HasLiteral(text))) && !ParsingConstructedType)
            return WORD_t;
        else
            return TYPEREFERENCE;
    } else
        return MODULEREFERENCE;
}

static int GetLowerCaseToken(const char* text) {
    int result;

    if (InOIDContext)
        return OID_IDENTIFIER;

    if (DummyParameters && (result = DummyParameters->GetIdentifierType(text)) != -1)
        return result;

    if (Module && (result = Module->GetIdentifierType(text)) != -1)
        return result;

    return IdentifierTokenContext;
}

#define comment_line 1
#define directive 2
#define remove_directive 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO((int c, char* buf_ptr));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char*, yyconst char*, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char*));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int* yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( yy_current_buffer->yy_is_interactive ) \
    { \
        int c = '*', n; \
        for ( n = 0; n < max_size && \
                (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
            buf[n] = (char) c; \
        if ( c == '\n' ) \
            buf[n++] = (char) c; \
        if ( c == EOF && ferror( yyin ) ) \
            YY_FATAL_ERROR( "input in flex scanner failed" ); \
        result = n; \
    } \
    else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
              && ferror( yyin ) ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
    YY_USER_ACTION

YY_DECL {
    register yy_state_type yy_current_state;
    register char* yy_cp, *yy_bp;
    register int yy_act;

#line 147 "asn_lex.l"



    if (yy_init) {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if (! yy_start)
            yy_start = 1;   /* first start state */

        if (! yyin)
            yyin = stdin;

        if (! yyout)
            yyout = stdout;

        if (! yy_current_buffer)
            yy_current_buffer =
            yy_create_buffer(yyin, YY_BUF_SIZE);

        yy_load_buffer_state();
    }

    while (1) {      /* loops until end-of-file is reached */
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start;
yy_match:
        do {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            if (yy_accept[yy_current_state]) {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
            }
            while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
                yy_current_state = (int) yy_def[yy_current_state];
                if (yy_current_state >= 581)
                    yy_c = yy_meta[(unsigned int) yy_c];
            }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
            ++yy_cp;
        } while (yy_base[yy_current_state] != 1314);

yy_find_action:
        yy_act = yy_accept[yy_current_state];
        if (yy_act == 0) {
            /* have to back up */
            yy_cp = yy_last_accepting_cpos;
            yy_current_state = yy_last_accepting_state;
            yy_act = yy_accept[yy_current_state];
        }

        YY_DO_BEFORE_ACTION;


do_action:  /* This label is used only to access EOF actions. */


        switch (yy_act) {
        /* beginning of action switch */
        case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = yy_hold_char;
            yy_cp = yy_last_accepting_cpos;
            yy_current_state = yy_last_accepting_state;
            goto yy_find_action;

        case 1:
            YY_RULE_SETUP
#line 149 "asn_lex.l" 
            { return ASSIGNMENT; }
            YY_BREAK
        case 2:
            YY_RULE_SETUP
#line 151 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), ABSENT, WORD_t); }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
#line 152 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), ABSTRACT_SYNTAX, WORD_t); }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
#line 153 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), ALL, WORD_t); }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
#line 154 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), ANY, WORD_t); }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
#line 155 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), APPLICATION, WORD_t); }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
#line 156 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), AUTOMATIC, WORD_t); }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
#line 157 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), BEGIN_t, WORD_t); }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
#line 158 "asn_lex.l" 
            { return BIT; }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
#line 159 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), BMPString, WORD_t); }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
#line 160 "asn_lex.l" 
            { return BOOLEAN_t; }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
#line 161 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), BY, WORD_t); }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
#line 162 "asn_lex.l" 
            { return CHARACTER; }
            YY_BREAK
        case 14:
            YY_RULE_SETUP
#line 163 "asn_lex.l" 
            { return CHOICE; }
            YY_BREAK
        case 15:
            YY_RULE_SETUP
#line 164 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), CLASS, WORD_t); }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
#line 165 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), COMPONENT, WORD_t); }
            YY_BREAK
        case 17:
            YY_RULE_SETUP
#line 166 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), COMPONENTS, WORD_t); }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
#line 167 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), CONSTRAINED, WORD_t); }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
#line 168 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), DEFAULT, WORD_t); }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
#line 169 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), DEFINED, WORD_t); }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
#line 170 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), DEFINITIONS, WORD_t); }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
#line 171 "asn_lex.l" 
            { return EMBEDDED; }
            YY_BREAK
        case 23:
            YY_RULE_SETUP
#line 172 "asn_lex.l" 
            { return END; }
            YY_BREAK
        case 24:
            YY_RULE_SETUP
#line 173 "asn_lex.l" 
            { return ENUMERATED; }
            YY_BREAK
        case 25:
            YY_RULE_SETUP
#line 174 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), EXCEPT, WORD_t); }
            YY_BREAK
        case 26:
            YY_RULE_SETUP
#line 175 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), EXPLICIT, WORD_t); }
            YY_BREAK
        case 27:
            YY_RULE_SETUP
#line 176 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), EXPORTS, WORD_t); }
            YY_BREAK
        case 28:
            YY_RULE_SETUP
#line 177 "asn_lex.l" 
            { return EXTERNAL; }
            YY_BREAK
        case 29:
            YY_RULE_SETUP
#line 178 "asn_lex.l" 
            { return FALSE_t; }
            YY_BREAK
        case 30:
            YY_RULE_SETUP
#line 179 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), FROM, WORD_t); }
            YY_BREAK
        case 31:
            YY_RULE_SETUP
#line 180 "asn_lex.l" 
            { return GeneralString; }
            YY_BREAK
        case 32:
            YY_RULE_SETUP
#line 181 "asn_lex.l" 
            { return GraphicString; }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
#line 182 "asn_lex.l" 
            { return GeneralizedTime; }
            YY_BREAK
        case 34:
            YY_RULE_SETUP
#line 183 "asn_lex.l" 
            { return IA5String; }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
#line 184 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), TYPE_IDENTIFIER, WORD_t); }
            YY_BREAK
        case 36:
            YY_RULE_SETUP
#line 185 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), IDENTIFIER_t, WORD_t); }
            YY_BREAK
        case 37:
            YY_RULE_SETUP
#line 186 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), IMPLICIT, WORD_t); }
            YY_BREAK
        case 38:
            YY_RULE_SETUP
#line 187 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), IMPORTS, WORD_t); }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
#line 188 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), INCLUDES, WORD_t); }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
#line 189 "asn_lex.l" 
            { return INSTANCE; }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
#line 190 "asn_lex.l" 
            { return INTEGER_t; }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
#line 191 "asn_lex.l" 
            { return INTERSECTION; }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
#line 192 "asn_lex.l" 
            { return ISO646String; }
            YY_BREAK
        case 44:
            YY_RULE_SETUP
#line 193 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), MACRO, WORD_t); }
            YY_BREAK
        case 45:
            YY_RULE_SETUP
#line 194 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), MAX, WORD_t); }
            YY_BREAK
        case 46:
            YY_RULE_SETUP
#line 195 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), MIN, WORD_t); }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
#line 196 "asn_lex.l" 
            { return MINUS_INFINITY; }
            YY_BREAK
        case 48:
            YY_RULE_SETUP
#line 197 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), NOTATION, WORD_t); }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
#line 198 "asn_lex.l" 
            { return NullTokenContext; }
            YY_BREAK
        case 50:
            YY_RULE_SETUP
#line 199 "asn_lex.l" 
            { return NumericString; }
            YY_BREAK
        case 51:
            YY_RULE_SETUP
#line 200 "asn_lex.l" 
            { return OBJECT; }
            YY_BREAK
        case 52:
            YY_RULE_SETUP
#line 201 "asn_lex.l" 
            { return OCTET; }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
#line 202 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), OF_t, WORD_t); }
            YY_BREAK
        case 54:
            YY_RULE_SETUP
#line 203 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), OPTIONAL_t, WORD_t); }
            YY_BREAK
        case 55:
            YY_RULE_SETUP
#line 204 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), PDV, WORD_t); }
            YY_BREAK
        case 56:
            YY_RULE_SETUP
#line 205 "asn_lex.l" 
            { return PLUS_INFINITY; }
            YY_BREAK
        case 57:
            YY_RULE_SETUP
#line 206 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), PRESENT, WORD_t); }
            YY_BREAK
        case 58:
            YY_RULE_SETUP
#line 207 "asn_lex.l" 
            { return PrintableString; }
            YY_BREAK
        case 59:
            YY_RULE_SETUP
#line 208 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), PRIVATE, WORD_t); }
            YY_BREAK
        case 60:
            YY_RULE_SETUP
#line 209 "asn_lex.l" 
            { return REAL; }
            YY_BREAK
        case 61:
            YY_RULE_SETUP
#line 210 "asn_lex.l" 
            { return SEQUENCE; }
            YY_BREAK
        case 62:
            YY_RULE_SETUP
#line 211 "asn_lex.l" 
            { return SET; }
            YY_BREAK
        case 63:
            YY_RULE_SETUP
#line 212 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), SIZE_t, WORD_t); }
            YY_BREAK
        case 64:
            YY_RULE_SETUP
#line 213 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), STRING, WORD_t); }
            YY_BREAK
        case 65:
            YY_RULE_SETUP
#line 214 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), SYNTAX, WORD_t); }
            YY_BREAK
        case 66:
            YY_RULE_SETUP
#line 215 "asn_lex.l" 
            { return T61String; }
            YY_BREAK
        case 67:
            YY_RULE_SETUP
#line 216 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), TAGS, WORD_t); }
            YY_BREAK
        case 68:
            YY_RULE_SETUP
#line 217 "asn_lex.l" 
            { return TeletexString; }
            YY_BREAK
        case 69:
            YY_RULE_SETUP
#line 218 "asn_lex.l" 
            { return TRUE_t; }
            YY_BREAK
        case 70:
            YY_RULE_SETUP
#line 219 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), TYPE_t, WORD_t); }
            YY_BREAK
        case 71:
            YY_RULE_SETUP
#line 220 "asn_lex.l" 
            { return UNION; }
            YY_BREAK
        case 72:
            YY_RULE_SETUP
#line 221 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), UNIQUE, WORD_t); }
            YY_BREAK
        case 73:
            YY_RULE_SETUP
#line 222 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), UNIVERSAL, WORD_t); }
            YY_BREAK
        case 74:
            YY_RULE_SETUP
#line 223 "asn_lex.l" 
            { return UniversalString; }
            YY_BREAK
        case 75:
            YY_RULE_SETUP
#line 224 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), VALUE, WORD_t); }
            YY_BREAK
        case 76:
            YY_RULE_SETUP
#line 225 "asn_lex.l" 
            { return VideotexString; }
            YY_BREAK
        case 77:
            YY_RULE_SETUP
#line 226 "asn_lex.l" 
            { return VisibleString; }
            YY_BREAK
        case 78:
            YY_RULE_SETUP
#line 227 "asn_lex.l" 
            { return TokenSelect(!Is_WORD(), WITH, WORD_t); }
            YY_BREAK
        case 79:
            YY_RULE_SETUP
#line 230 "asn_lex.l"
            {
                BEGIN(comment_line);
            }
            YY_BREAK
        case 80:
            YY_RULE_SETUP
#line 234 "asn_lex.l"
            {
                BEGIN(INITIAL);
            }
            YY_BREAK
        case 81:
            YY_RULE_SETUP
#line 238 "asn_lex.l"
            {
                lineNumber++;
                BEGIN(INITIAL);
            }
            YY_BREAK
        case YY_STATE_EOF(comment_line):
#line 243 "asn_lex.l"
            {
                BEGIN(INITIAL);
            }
            YY_BREAK
        case 82:
            YY_RULE_SETUP
#line 247 "asn_lex.l"
            {
            }
            YY_BREAK
        case 83:
            YY_RULE_SETUP
#line 250 "asn_lex.l"
            {
                BEGIN(directive);
            }
            YY_BREAK
        case 84:
            YY_RULE_SETUP
#line 254 "asn_lex.l"
            {
                BEGIN(INITIAL);
            }
            YY_BREAK
        case 85:
            YY_RULE_SETUP
#line 258 "asn_lex.l"
            {
                BEGIN(remove_directive);
            }
            YY_BREAK
        case 86:
            YY_RULE_SETUP
#line 262 "asn_lex.l"
            {
                AddRemoveItem(yytext);
            }
            YY_BREAK
        case 87:
            YY_RULE_SETUP
#line 266 "asn_lex.l"
            {
                BEGIN(INITIAL);
            }
            YY_BREAK
        case 88:
            YY_RULE_SETUP
#line 270 "asn_lex.l"
            {
            }
            YY_BREAK
        case 89:
            YY_RULE_SETUP
#line 273 "asn_lex.l"
            {
            }
            YY_BREAK
        case 90:
            YY_RULE_SETUP
#line 276 "asn_lex.l" 
            { return '@'; }
            YY_BREAK
        case 91:
            YY_RULE_SETUP
#line 278 "asn_lex.l"
            {
                int result =  BraceTokenContext;
                switch (BraceTokenContext) {
                case OBJECTSET_BRACE:
                    BraceTokenContext = OBJECT_BRACE;
                    break;
                case OBJECT_BRACE:
                case VALUESET_BRACE:
                    BraceTokenContext = '{';
                    break;
                }
                return result;
            }
            YY_BREAK
        case 92:
            YY_RULE_SETUP
#line 293 "asn_lex.l" 
            { return '!'; }
            YY_BREAK
        case 93:
            YY_RULE_SETUP
#line 295 "asn_lex.l" 
            { return '}'; }
            YY_BREAK
        case 94:
            YY_RULE_SETUP
#line 297 "asn_lex.l" 
            { return '['; }
            YY_BREAK
        case 95:
            YY_RULE_SETUP
#line 299 "asn_lex.l" 
            { return ']'; }
            YY_BREAK
        case 96:
            YY_RULE_SETUP
#line 301 "asn_lex.l" 
            { return '('; }
            YY_BREAK
        case 97:
            YY_RULE_SETUP
#line 303 "asn_lex.l" 
            { return ')'; }
            YY_BREAK
        case 98:
            YY_RULE_SETUP
#line 305 "asn_lex.l" 
            { return '<'; }
            YY_BREAK
        case 99:
            YY_RULE_SETUP
#line 307 "asn_lex.l" 
            { return '>'; }
            YY_BREAK
        case 100:
            YY_RULE_SETUP
#line 309 "asn_lex.l" 
            { return '|'; }
            YY_BREAK
        case 101:
            YY_RULE_SETUP
#line 311 "asn_lex.l" 
            { return ';'; }
            YY_BREAK
        case 102:
            YY_RULE_SETUP
#line 313 "asn_lex.l" 
            { return '+'; }
            YY_BREAK
        case 103:
            YY_RULE_SETUP
#line 315 "asn_lex.l" 
            { return '-'; }
            YY_BREAK
        case 104:
            YY_RULE_SETUP
#line 317 "asn_lex.l" 
            { return '*'; }
            YY_BREAK
        case 105:
            YY_RULE_SETUP
#line 319 "asn_lex.l" 
            { return '/'; }
            YY_BREAK
        case 106:
            YY_RULE_SETUP
#line 321 "asn_lex.l" 
            { return ','; }
            YY_BREAK
        case 107:
            YY_RULE_SETUP
#line 323 "asn_lex.l" 
            { return '.'; }
            YY_BREAK
        case 108:
            YY_RULE_SETUP
#line 325 "asn_lex.l" 
            { return ':'; }
            YY_BREAK
        case 109:
            YY_RULE_SETUP
#line 327 "asn_lex.l" 
            { return '='; }
            YY_BREAK
        case 110:
            YY_RULE_SETUP
#line 329 "asn_lex.l" 
            { return '|'; }
            YY_BREAK
        case 111:
            YY_RULE_SETUP
#line 331 "asn_lex.l" 
            { return '^'; }
            YY_BREAK
        case 112:
            YY_RULE_SETUP
#line 334 "asn_lex.l"
            {
                std::string s = yytext;
                size_t pos;
                while ((pos = s.find('\n')) != -1) {
                    size_t start = pos;
                    while (start > 0 && isspace(s[start - 1]))
                        start--;
                    while (isspace(s[pos]))
                        pos++;
                    s.replace(start, pos - start, " ");
                    lineNumber++;
                }
                yylval.sval = new std::string(s);
                return CSTRING;
            }
            YY_BREAK
        case 113:
            YY_RULE_SETUP
#line 350 "asn_lex.l"
            {
                if (InOIDContext) {
                    yylval.sval = new std::string(yytext);
                    return OID_INTEGER;
                } else {
                    const char* ptr = yytext;
                    yylval.ival = 0;
                    while (*ptr != '\0')
                        yylval.ival = yylval.ival * 10 +* ptr++ - '0';
                    return INTEGER;
                }
            }
            YY_BREAK
        case 114:
            YY_RULE_SETUP
#line 364 "asn_lex.l"
            {
                yylval.sval = new std::string(yytext);
                return GetLowerCaseToken(yytext);
            }
            YY_BREAK
        case 115:
            YY_RULE_SETUP
#line 369 "asn_lex.l"
            {
                /* See X.681 section 7.5 */
                yylval.sval = new std::string(yytext);
                int result;
                if (InformationFromObjectContext && (result = InformationFromObjectContext->GetFieldToken(yytext)))
                    return result;

                return fieldreference;
            }
            YY_BREAK
        case 116:
            YY_RULE_SETUP
#line 378 "asn_lex.l"
            {
                /* See X.681 section 7.4 */
                yylval.sval = new std::string(yytext);
                int result;
                if (InformationFromObjectContext && (result = InformationFromObjectContext->GetFieldToken(yytext)))
                    return result;
                return FieldReference;
            }
            YY_BREAK
        case 117:
            YY_RULE_SETUP
#line 387 "asn_lex.l"
            {
                /* See X.680 section 9.2 */
                yylval.sval = new std::string(yytext);
                return GetUpperCaseToken(yytext);
            }
            YY_BREAK
        case 118:
            YY_RULE_SETUP
#line 392 "asn_lex.l" 
            { }
            YY_BREAK
        case 119:
            YY_RULE_SETUP
#line 394 "asn_lex.l"
            {
                lineNumber++;
            }
            YY_BREAK
        case 120:
            YY_RULE_SETUP
#line 398 "asn_lex.l" 
            { std::cerr << StdError(Fatal) << "unknown token " << yytext << std::endl; }
            YY_BREAK
        case 121:
            YY_RULE_SETUP
#line 401 "asn_lex.l"
            ECHO;
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(directive):
        case YY_STATE_EOF(remove_directive):
            yyterminate();

        case YY_END_OF_BUFFER: {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = yy_hold_char;
            YY_RESTORE_YY_MORE_OFFSET

            if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW) {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between yy_current_buffer and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                yy_n_chars = yy_current_buffer->yy_n_chars;
                yy_current_buffer->yy_input_file = yyin;
                yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars]) {
                /* This was really a NUL. */
                yy_state_type yy_next_state;

                yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = yytext_ptr + YY_MORE_ADJ;

                if (yy_next_state) {
                    /* Consume the NUL. */
                    yy_cp = ++yy_c_buf_p;
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else {
                    yy_cp = yy_c_buf_p;
                    goto yy_find_action;
                }
            }

            else switch (yy_get_next_buffer()) {
                case EOB_ACT_END_OF_FILE: {
                    yy_did_buffer_switch_on_eof = 0;

                    if (yywrap()) {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                    }

                    else {
                        if (! yy_did_buffer_switch_on_eof)
                            YY_NEW_FILE;
                    }
                    break;
                }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p =
                        yytext_ptr + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext_ptr + YY_MORE_ADJ;
                    goto yy_match;

                case EOB_ACT_LAST_MATCH:
                    yy_c_buf_p =
                        &yy_current_buffer->yy_ch_buf[yy_n_chars];

                    yy_current_state = yy_get_previous_state();

                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext_ptr + YY_MORE_ADJ;
                    goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer() {
    register char* dest = yy_current_buffer->yy_ch_buf;
    register char* source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed");

    if (yy_current_buffer->yy_fill_buffer == 0) {
        /* Don't try to fill the buffer, so this is an EOF. */
        if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1) {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

    for (i = 0; i < number_to_move; ++i)
        *(dest++) = *(source++);

    if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_current_buffer->yy_n_chars = yy_n_chars = 0;

    else {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while (num_to_read <= 0) {
            /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
                "input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int)(yy_c_buf_p - b->yy_ch_buf);

            if (b->yy_is_our_buffer) {
                int new_size = b->yy_buf_size * 2;

                if (new_size <= 0)
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char*)
                               /* Include room in for 2 EOB chars. */
                               yy_flex_realloc((void*) b->yy_ch_buf,
                                               b->yy_buf_size + 2);
            } else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if (! b->yy_ch_buf)
                YY_FATAL_ERROR(
                    "fatal error - scanner input buffer overflow");

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                          number_to_move - 1;
#endif
        }

        if (num_to_read > YY_READ_BUF_SIZE)
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
                 yy_n_chars, num_to_read);

        yy_current_buffer->yy_n_chars = yy_n_chars;
    }

    if (yy_n_chars == 0) {
        if (number_to_move == YY_MORE_ADJ) {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin);
        }

        else {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
        }
    }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state() {
    register yy_state_type yy_current_state;
    register char* yy_cp;

    yy_current_state = yy_start;

    for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp) {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if (yy_accept[yy_current_state]) {
            yy_last_accepting_state = yy_current_state;
            yy_last_accepting_cpos = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
            yy_current_state = (int) yy_def[yy_current_state];
            if (yy_current_state >= 581)
                yy_c = yy_meta[(unsigned int) yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

    return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
    register int yy_is_jam;
    register char* yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if (yy_accept[yy_current_state]) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int) yy_def[yy_current_state];
        if (yy_current_state >= 581)
            yy_c = yy_meta[(unsigned int) yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 580);

    return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput(int c, register char* yy_bp)
#else
static void yyunput(c, yy_bp)
int c;
register char* yy_bp;
#endif
{
    register char* yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if (yy_cp < yy_current_buffer->yy_ch_buf + 2) {
        /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char* dest = &yy_current_buffer->yy_ch_buf[
                                  yy_current_buffer->yy_buf_size + 2];
        register char* source =
            &yy_current_buffer->yy_ch_buf[number_to_move];

        while (source > yy_current_buffer->yy_ch_buf)
            *--dest = *--source;

        yy_cp += (int)(dest - source);
        yy_bp += (int)(dest - source);
        yy_current_buffer->yy_n_chars =
            yy_n_chars = yy_current_buffer->yy_buf_size;

        if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
            YY_FATAL_ERROR("flex scanner push-back overflow");
    }

    *--yy_cp = (char) c;


    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
}
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
    int c;

    *yy_c_buf_p = yy_hold_char;

    if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else {
            /* need more input */
            int offset = yy_c_buf_p - yytext_ptr;
            ++yy_c_buf_p;

            switch (yy_get_next_buffer()) {
            case EOB_ACT_LAST_MATCH:
                /* This happens because yy_g_n_b()
                 * sees that we've accumulated a
                 * token and flags that we need to
                 * try matching the token before
                 * proceeding.  But for input(),
                 * there's no matching to consider.
                 * So convert the EOB_ACT_LAST_MATCH
                 * to EOB_ACT_END_OF_FILE.
                 */

                /* Reset buffer status. */
                yyrestart(yyin);

            /* fall through */

            case EOB_ACT_END_OF_FILE: {
                if (yywrap())
                    return EOF;

                if (! yy_did_buffer_switch_on_eof)
                    YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p = yytext_ptr + offset;
                break;
            }
        }
    }

    c = *(unsigned char*) yy_c_buf_p;   /* cast for 8-bit char's */
    *yy_c_buf_p = '\0'; /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;


    return c;
}


#ifdef YY_USE_PROTOS
void yyrestart(FILE* input_file)
#else
void yyrestart(input_file)
FILE* input_file;
#endif
{
    if (! yy_current_buffer)
        yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

    yy_init_buffer(yy_current_buffer, input_file);
    yy_load_buffer_state();
}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
YY_BUFFER_STATE new_buffer;
#endif
{
    if (yy_current_buffer == new_buffer)
        return;

    if (yy_current_buffer) {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
    }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size)
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE* file;
int size;
#endif
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
    if (! b)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char*) yy_flex_alloc(b->yy_buf_size + 2);
    if (! b->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file);

    return b;
}


#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
YY_BUFFER_STATE b;
#endif
{
    if (! b)
        return;

    if (b == yy_current_buffer)
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if (b->yy_is_our_buffer)
        yy_flex_free((void*) b->yy_ch_buf);

    yy_flex_free((void*) b);
}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO((int));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE* file)
#else
void yy_init_buffer(b, file)
YY_BUFFER_STATE b;
FILE* file;
#endif


{
    yy_flush_buffer(b);

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
    b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
    b->yy_is_interactive = 0;
#else
    b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;
#endif
#endif
}


#ifdef YY_USE_PROTOS
void yy_flush_buffer(YY_BUFFER_STATE b)
#else
void yy_flush_buffer(b)
YY_BUFFER_STATE b;
#endif

{
    if (! b)
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if (b == yy_current_buffer)
        yy_load_buffer_state();
}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size)
#else
YY_BUFFER_STATE yy_scan_buffer(base, size)
char* base;
yy_size_t size;
#endif
{
    YY_BUFFER_STATE b;

    if (size < 2 ||
            base[size - 2] != YY_END_OF_BUFFER_CHAR ||
            base[size - 1] != YY_END_OF_BUFFER_CHAR)
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
    if (! b)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

    b->yy_buf_size = size - 2;  /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b);

    return b;
}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string(yyconst char* yy_str)
#else
YY_BUFFER_STATE yy_scan_string(yy_str)
yyconst char* yy_str;
#endif
{
    int len;
    for (len = 0; yy_str[len]; ++len)
        ;

    return yy_scan_bytes(yy_str, len);
}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes(yyconst char* bytes, int len)
#else
YY_BUFFER_STATE yy_scan_bytes(bytes, len)
yyconst char* bytes;
int len;
#endif
{
    YY_BUFFER_STATE b;
    char* buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = len + 2;
    buf = (char*) yy_flex_alloc(n);
    if (! buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

    for (i = 0; i < len; ++i)
        buf[i] = bytes[i];

    buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf, n);
    if (! b)
        YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state)
int new_state;
#endif
{
    if (yy_start_stack_ptr >= yy_start_stack_depth) {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof(int);

        if (! yy_start_stack)
            yy_start_stack = (int*) yy_flex_alloc(new_size);

        else
            yy_start_stack = (int*) yy_flex_realloc(
                                 (void*) yy_start_stack, new_size);

        if (! yy_start_stack)
            YY_FATAL_ERROR(
                "out of memory expanding start-condition stack");
    }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state() {
    if (--yy_start_stack_ptr < 0)
        YY_FATAL_ERROR("start-condition stack underflow");

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state() {
    return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error(yyconst char msg[])
#else
static void yy_fatal_error(msg)
char msg[];
#endif
{
    (void) fprintf(stderr, "%s\n", msg);
    exit(YY_EXIT_FAILURE);
}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
    { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
    } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char* s1, yyconst char* s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char* s1;
yyconst char* s2;
int n;
#endif
{
    register int i;
    for (i = 0; i < n; ++i)
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char* s)
#else
static int yy_flex_strlen(s)
yyconst char* s;
#endif
{
    register int n;
    for (n = 0; s[n]; ++n)
        ;

    return n;
}
#endif


#ifdef YY_USE_PROTOS
static void* yy_flex_alloc(yy_size_t size)
#else
static void* yy_flex_alloc(size)
yy_size_t size;
#endif
{
    return (void*) malloc(size);
}

#ifdef YY_USE_PROTOS
static void* yy_flex_realloc(void* ptr, yy_size_t size)
#else
static void* yy_flex_realloc(ptr, size)
void* ptr;
yy_size_t size;
#endif
{
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void*) realloc((char*) ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void* ptr)
#else
static void yy_flex_free(ptr)
void* ptr;
#endif
{
    free(ptr);
}

#if YY_MAIN
int main() {
    yylex();
    return 0;
}
#endif
#line 401 "asn_lex.l"

/* End PR_LEX.L */
