#define yy_create_buffer id_create_buffer
#define yy_delete_buffer id_delete_buffer
#define yy_scan_buffer id_scan_buffer
#define yy_scan_string id_scan_string
#define yy_scan_bytes id_scan_bytes
#define yy_flex_debug id_flex_debug
#define yy_init_buffer id_init_buffer
#define yy_flush_buffer id_flush_buffer
#define yy_load_buffer_state id_load_buffer_state
#define yy_switch_to_buffer id_switch_to_buffer
#define yyin idin
#define yyleng idleng
#define yylex idlex
#define yyout idout
#define yyrestart idrestart
#define yytext idtext
#define yywrap idwrap

#ifdef _MSC_VER
#pragma warning(disable:4244 4505)
#endif

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include "unistd.h"

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state* YY_BUFFER_STATE;

extern int yyleng;
extern FILE* yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if ( condition_holds )
 *      yyless( 5 );
 *  else
 *      do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
    { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        YY_RESTORE_YY_MORE_OFFSET \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state {
    FILE* yy_input_file;

    char* yy_ch_buf;        /* input buffer */
    char* yy_buf_pos;       /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;      /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char* yy_c_buf_p = (char*) 0;
static int yy_init = 1;     /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO((FILE* input_file));

void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE* file, int size));
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE* file));
void yy_flush_buffer YY_PROTO((YY_BUFFER_STATE b));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO((char* base, yy_size_t size));
YY_BUFFER_STATE yy_scan_string YY_PROTO((yyconst char* yy_str));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO((yyconst char* bytes, int len));

static void* yy_flex_alloc YY_PROTO((yy_size_t));
static void* yy_flex_realloc YY_PROTO((void*, yy_size_t));
static void yy_flex_free YY_PROTO((void*));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
        if ( ! yy_current_buffer ) \
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
        if ( ! yy_current_buffer ) \
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE* yyin = (FILE*) 0, *yyout = (FILE*) 0;
typedef int yy_state_type;
extern char* yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((yyconst char msg[]));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
    yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 122
#define YY_END_OF_BUFFER 123
static yyconst short int yy_accept[568] = {
    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    123,  121,  119,  120,  121,  121,  109,   92,  103,  101,
    105,  102,  106,  104,  114,  107,  100,   97,  108,   98,
    82,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    88,  110,  116,   83,   99,   81,   80,   81,   87,   85,
    84,   86,   96,   95,   94,   93,   91,   89,   90,    0,
    113,    0,    0,    0,   78,  114,    0,    0,  117,  117,
    117,  117,  117,  117,  118,  117,  117,  117,  117,   12,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  118,

    118,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    118,  117,  117,   52,  117,  117,  117,  117,  118,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  118,  117,
    118,  117,  118,  117,    0,  116,   79,    0,    0,  115,
    0,    0,  111,  112,    1,  117,    4,    5,  117,  117,
    0,  117,    9,  117,  117,  117,  117,  117,  117,  117,
    117,  117,   23,  117,  117,  117,  117,  117,  117,  118,
    118,  117,  117,  117,  117,  117,  117,  117,  117,   44,
    45,  117,  117,  118,  117,  117,  117,   54,  117,  117,
    117,  118,  117,  117,   61,  117,  117,  117,  117,  117,

    117,  117,  118,  117,  118,  117,  118,  118,  117,    0,
    113,    0,    0,  117,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
    117,  117,  117,  117,   30,  118,  118,  117,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,   48,  118,
    117,  117,  117,  117,  117,  117,  118,   59,  117,   62,
    117,  117,  117,   66,   68,   69,  118,  117,  117,  117,
    118,  117,  118,  118,   77,    0,    0,    0,  117,  117,
    117,  117,    8,  118,  117,  117,  117,   15,  117,  117,
    117,  117,  117,  117,  117,  117,  117,  117,   29,  118,

    118,  118,  117,  117,  117,  117,  117,  117,  117,  117,
    43,  117,  117,  118,  117,   51,  117,    0,  117,  117,
    118,  117,  117,  117,  118,    0,  118,   70,  117,  117,
    118,   74,  118,  118,    0,    2,  117,  117,  117,  118,
    117,  117,   14,  117,  117,  117,  117,  117,  117,  117,
    25,  117,  117,  117,  118,  118,  118,  117,  117,  117,
    117,  117,  117,  117,  117,    0,  117,  118,   50,  117,
    117,  117,  117,  118,  117,   63,   64,  118,  117,  118,
    71,  117,  118,  118,  118,    0,  117,  117,  117,  118,
    11,  117,  117,  117,   19,   20,  117,  117,  117,  117,

    27,  117,  118,  118,  118,  117,  117,   37,  117,  117,
    40,  117,  117,  117,  117,  118,  117,  117,   56,   58,
    118,  117,  118,  117,  118,  117,  118,  118,  118,    0,
    117,  117,  117,  118,  117,  117,  117,  117,   22,  117,
    26,   28,  118,  118,  118,  117,   36,   38,   39,  117,
    118,  117,   47,  118,   53,  117,  118,   60,  118,  117,
    118,  117,  118,  118,  118,    0,    0,    0,  117,    7,
    10,   13,   16,  117,  117,  117,  118,  118,   33,  117,
    117,  118,  117,  118,  117,  118,   65,  117,  118,   72,
    118,  118,  118,  117,  117,   17,  117,  117,   24,  118,

    118,   35,  117,  118,  117,  118,  117,  118,  117,  118,
    118,  118,  118,  117,    6,   18,   21,  118,  118,  117,
    118,  117,  118,  117,  118,  117,  118,  118,  118,  118,
    117,  118,  118,   41,   42,  117,  118,  117,  118,  117,
    118,  118,  118,  118,  117,   31,   32,  117,   49,   55,
    118,  117,   67,  118,  118,   76,  117,   46,  118,  117,
    118,   75,    3,   57,   34,   73,    0
} ;

static yyconst int yy_ec[256] = {
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    4,    1,    5,    1,    1,    1,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
    18,   19,   20,   21,   18,   18,   22,   23,   24,   25,
    26,   27,    1,   28,   29,   30,   31,   32,   33,   34,
    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
    55,    1,   56,   57,   58,    1,   59,   60,   61,   62,

    63,   64,   65,   66,   67,   64,   64,   68,   69,   70,
    71,   72,   64,   73,   74,   75,   76,   77,   64,   78,
    64,   64,   79,   80,   81,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1
} ;

static yyconst int yy_meta[82] = {
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    1,    2,    2,    2,    2,    2,
    2,    2,    1,    1,    1,    1,    1,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    1,    1,    2,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
    1
} ;

static yyconst short int yy_base[578] = {
    0,
    0,    0,   79,   80,   81,   82,   86,   88,   83,   84,
    812, 3596, 3596, 3596,  803,    0,   94, 3596, 3596, 3596,
    3596,  792, 3596, 3596,   86,  780, 3596, 3596, 3596, 3596,
    3596,  151,   79,   94,  200,  105,  206,  217,  223,  244,
    252,  265,  281,  287,  302,  310,  327,  335,  352,  358,
    3596, 3596,  782, 3596, 3596, 3596, 3596,  780, 3596, 3596,
    3596, 3596, 3596, 3596, 3596, 3596, 3596, 3596, 3596,  782,
    773,  761,   84,   81, 3596,  392,  746,  376,  387,  393,
    404,  415,  421,  432,  757,  443,  449,  460,  471,  477,
    493,  499,  510,  523,  526,  539,  547,  550,  563,   86,

    116,  578,  581,  589,  604,  615,  630,  636,  647,  658,
    75,  671,  674,  687,  695,  698,  711,  719,  112,  735,
    741,  752,  758,  769,  780,  786,  797,  803,   97,  814,
    139,  820,  194,  831,  756,  741, 3596,  745,  732,  719,
    691,  671, 3596, 3596, 3596,  844,  855,  861,  872,  883,
    670,  894,  900,  911,  917,  932,  933,  949,  950,  965,
    971,  986,  987, 1002, 1008, 1019, 1025, 1036, 1047,  113,
    102, 1060, 1068, 1071, 1086, 1089, 1092, 1118, 1110, 1121,
    1134, 1142, 1145,  114, 1160, 1166, 1177, 1183, 1194, 1200,
    1215,  138, 1218, 1226, 1239, 1247, 1255, 1263, 1276, 1284,

    1297, 1305,  224, 1313,  101, 1329,  241,  230, 1330,  663,
    658,  146,  616, 1345, 1346, 1361, 1367, 1382, 1383, 1400,
    1399, 1415, 1421, 1432, 1443, 1454, 1460, 1475, 1478, 1486,
    1499, 1507, 1515, 1530, 1536,  225,  247, 1547, 1553, 1568,
    1569, 1584, 1590, 1601, 1616, 1619, 1627, 1640, 1643,  226,
    1660, 1663, 1676, 1684, 1697, 1705,  228, 1708, 1723, 1729,
    1740, 1746, 1757, 1763, 1774, 1785,  245, 1791, 1806, 1809,
    265, 1824,   77,  219, 1830,  557,  530,  518, 1841, 1857,
    1863, 1879, 1880,  249, 1896, 1902, 1917, 1918, 1933, 1934,
    1949, 1955, 1970, 1971, 1986, 2001, 2007, 2018, 2024,  218,

    251,  289, 2035, 2050, 2053, 2056, 2073, 2074, 2089, 2090,
    2105, 2111, 2122,  257, 2128, 2139, 2145, 2156, 2162, 2173,
    313, 2184, 2190, 2201,  293, 2207,  324, 2218, 2224, 2235,
    297, 2246,  270,  232,  514, 2252, 2267, 2270, 2273,  326,
    2288, 2294, 2305, 2311, 2327, 2333, 2348, 2354, 2371, 2370,
    2386, 2387, 2402, 2408,  321,  105,  336, 2424, 2423, 2439,
    2445, 2460, 2466, 2481, 2487, 2498, 2509,  303, 2515, 2531,
    2532, 2547, 2560,  325, 2568, 2571, 2584,  348, 2595,  361,
    2592, 2608,  373,  365,  378,  496, 2616, 2619, 2632,  384,
    2640, 2653, 2661, 2669, 2677, 2685, 2693, 2706, 2709, 2722,

    2733, 2739,  391,  409,  436, 2750, 2756, 2767, 2773, 2788,
    2789, 2804, 2810, 2821, 2827,  411, 2838, 2849, 2860, 2866,
    437, 2881,  454, 2887,  413, 2903,  340,  408,  419,  151,
    2909, 2920, 2935,  417, 2941, 2952, 2963, 2974, 2980, 2995,
    2996, 3011,  456,  471,  430, 3017, 3028, 3034, 3045, 3051,
    439, 3062, 3068,  483, 3079, 3085,  462, 3096,  490, 3102,
    486, 3113,  464,  497,  525,  465,  435, 3119, 3130, 3141,
    370, 3147, 3158, 3164, 3179, 3180,  503,  536,  355, 3195,
    3196,  495, 3212,  551, 3213,  569,  342, 3228,  589, 3229,
    600,  561,  602, 3244, 3245, 3260, 3266, 3277, 3283,  517,

    534, 3298, 3301,  475, 3309,  572, 3322,  615, 3330,  573,
    619,  613,  604, 3333, 3346, 3354, 3357,  584,  597, 3370,
    591, 3378,  629, 3381,  624, 3394,  636,  630,  652,  656,
    3402,  628,  668, 3405,  262, 3418,  692, 3429,  679, 3435,
    697,  699,  660,  708, 3451,  258,  256, 3457,  238, 3472,
    721, 3475,  221,  745,  711,  146, 3483, 3496,  754, 3504,
    767,  129, 3507,  128, 3522,  120, 3596, 3571, 3574, 3577,
    3580, 3583,  128, 3585, 3587, 3589, 3592
} ;

static yyconst short int yy_def[578] = {
    0,
    567,    1,  568,  568,  569,  569,  570,  570,  571,  571,
    567,  567,  567,  567,  572,  573,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    567,  567,  574,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  572,
    567,  575,  567,  567,  567,  567,  567,   32,   32,   32,
    32,   32,   32,   32,  576,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,  576,

    576,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    576,   32,   32,   32,   32,   32,   32,   32,  576,   32,
    32,   32,   32,   32,   32,   32,   32,   32,  576,   32,
    576,   32,  576,   32,  574,  574,  567,  577,  575,  575,
    567,  567,  567,  567,  567,   32,   32,   32,   32,   32,
    576,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,  576,
    576,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,  576,   32,   32,   32,   32,   32,   32,
    32,  576,   32,   32,   32,   32,   32,   32,   32,   32,

    32,   32,  576,   32,  576,   32,  576,  576,   32,  577,
    567,  567,  567,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,  576,  576,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,  576,
    32,   32,   32,   32,   32,   32,  576,   32,   32,   32,
    32,   32,   32,   32,   32,   32,  576,   32,   32,   32,
    576,   32,  576,  576,   32,  567,  567,  567,   32,   32,
    32,   32,   32,  576,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,  576,

    576,  576,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,  576,   32,   32,   32,   32,   32,   32,
    576,   32,   32,   32,  576,   32,  576,   32,   32,   32,
    576,   32,  576,  576,  567,   32,   32,   32,   32,  576,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,  576,  576,  576,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,  576,   32,   32,
    32,   32,   32,  576,   32,   32,   32,  576,   32,  576,
    32,   32,  576,  576,  576,  567,   32,   32,   32,  576,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

    32,   32,  576,  576,  576,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,  576,   32,   32,   32,   32,
    576,   32,  576,   32,  576,   32,  576,  576,  576,  567,
    32,   32,   32,  576,   32,   32,   32,   32,   32,   32,
    32,   32,  576,  576,  576,   32,   32,   32,   32,   32,
    576,   32,   32,  576,   32,   32,  576,   32,  576,   32,
    576,   32,  576,  576,  576,  567,  567,   32,   32,   32,
    576,   32,   32,   32,   32,   32,  576,  576,  576,   32,
    32,  576,   32,  576,   32,  576,  576,   32,  576,   32,
    576,  576,  576,   32,   32,   32,   32,   32,   32,  576,

    576,   32,   32,  576,   32,  576,   32,  576,   32,  576,
    576,  576,  576,   32,   32,   32,   32,  576,  576,   32,
    576,   32,  576,   32,  576,   32,  576,  576,  576,  576,
    32,  576,  576,   32,  576,   32,  576,   32,  576,   32,
    576,  576,  576,  576,   32,  576,  576,   32,  576,   32,
    576,   32,  576,  576,  576,  576,   32,   32,  576,   32,
    576,  576,   32,  576,   32,  576,    0,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567
} ;

static yyconst short int yy_nxt[3678] = {
    0,
    12,   13,   14,   13,   15,   16,   17,   18,   12,   19,
    20,   21,   22,   23,   24,   25,   25,   25,   25,   25,
    25,   25,   26,   27,   28,   29,   30,   31,   32,   33,
    34,   35,   36,   37,   38,   39,   40,   39,   39,   39,
    41,   42,   43,   44,   39,   45,   46,   47,   48,   49,
    50,   39,   39,   39,   51,   12,   52,   12,   53,   53,
    53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
    53,   53,   53,   53,   53,   53,   53,   53,   54,   55,
    12,   57,   57,   60,   60,   68,   68,  151,   64,  151,
    64,   58,   58,   65,   66,   65,   66,   73,  151,  141,

    74,   76,   76,   76,   76,   76,   76,   76,   79,  151,
    143,   86,  142,  151,  151,   87,  144,  151,   79,   88,
    79,   89,   79,   79,  151,  151,  151,   79,  151,   91,
    72,   90,  151,   92,   79,   79,   93,   79,   69,   69,
    151,  151,   79,  184,   79,   95,   96,  333,   79,  276,
    151,  151,  277,   79,  466,  170,   97,  467,  151,   61,
    61,   62,   62,   78,  203,  404,   79,   79,   79,   79,
    79,   79,   79,  237,  171,  236,  250,  271,  192,   79,
    80,   79,   79,   79,   79,   79,   79,   79,   79,   79,
    81,   79,   82,   79,   83,   79,   79,   79,   79,   84,

    79,   79,   79,   79,   79,  205,  151,  257,   79,   85,
    85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
    85,   85,   85,   85,   85,   85,   85,   85,   85,   79,
    151,  151,   94,  151,   98,   79,  151,  151,  151,   79,
    151,   79,  151,   79,  151,   79,   79,   79,   79,   79,
    151,   99,   79,  151,   79,  207,   79,  151,   79,  151,
    79,  151,   79,  151,   79,   79,   79,  208,  151,  151,
    151,   79,  102,   79,  151,  103,  355,  151,  334,  100,
    107,   79,  151,   79,  104,  105,  267,   79,  108,  101,
    106,   79,   79,   79,   79,   79,  274,  300,  314,  385,

    79,  151,  321,  273,   79,  151,   79,  109,   79,  151,
    112,  113,  301,  110,  114,  151,   79,  356,  116,  327,
    79,  340,   79,  368,  115,  151,  117,  331,   79,   79,
    79,   79,  118,  151,  120,   79,  151,  151,  151,   79,
    111,   79,  121,   79,  384,   79,  122,  125,  151,   79,
    79,   79,  151,   79,  151,  126,   79,  123,   79,  119,
    151,  357,  124,  416,   79,  378,   79,  151,   79,  383,
    79,  374,  127,  151,   79,   79,  130,  151,   79,  128,
    132,   79,  151,   79,  421,  151,  380,   79,  403,  129,
    151,   79,  390,   79,  134,   79,  151,   79,  463,   79,

    79,   79,  405,  151,  131,   79,   79,   76,   76,   76,
    76,   76,   76,   76,  423,   79,   79,   79,  133,   79,
    151,  151,   79,  151,   79,  151,   79,  428,   79,  151,
    79,  151,   79,   79,   79,   79,   79,  443,  425,  146,
    429,   79,  151,  147,   79,   79,  427,   79,  151,  151,
    79,  151,   79,  434,   79,  444,   79,  454,   79,  461,
    79,   79,   79,   79,  149,  465,  151,  148,  151,   79,
    144,   79,   79,   79,  151,   79,  151,  152,   79,  150,
    79,  471,   79,  151,   79,  464,   79,  151,   79,   79,
    79,   79,   79,  142,  479,  151,  153,   79,  151,   79,

    79,   79,  151,  154,  457,  445,   79,  151,   79,  151,
    79,  482,   79,  155,   79,  151,   79,  430,   79,   79,
    79,  156,   79,  459,  486,   79,  386,  158,   79,  151,
    477,  491,   79,  335,   79,  157,   79,  151,   79,   79,
    79,   79,   79,  492,  521,  478,  151,   79,  151,   79,
    159,  160,   79,   79,  487,  162,  161,  484,   79,  143,
    489,  504,   79,  151,   79,   79,   79,   79,   79,   79,
    163,   79,  141,  151,   79,  500,   79,  165,   79,   79,
    79,  151,   79,  518,  151,  151,   79,  164,   79,  168,
    166,   79,   79,   79,  167,   79,  151,  172,   79,  493,

    519,  151,   79,  151,   79,  169,   79,   79,  501,  151,
    79,   79,  151,  173,  151,  508,  151,   79,   79,   79,
    79,   79,   79,  506,   79,  151,   79,  151,   79,   79,
    79,  151,  174,   79,  175,  512,  151,   79,  523,  527,
    151,  151,  151,   79,   79,   79,  511,   79,  151,  278,
    176,  177,   79,  532,   79,  535,   79,  178,   79,   79,
    179,  510,  138,   79,  151,   79,  533,  211,  151,   79,
    530,   79,  151,   79,  513,   79,   79,  181,   79,   79,
    151,  180,  151,  213,   79,  529,   79,   79,   79,  525,
    79,  151,  546,  528,  182,   79,  539,  183,  537,   79,

    79,   79,  542,   79,  151,  541,   79,  212,  185,  151,
    79,  151,   79,   79,   79,   79,   79,   79,  543,   79,
    151,  186,   79,  151,   79,  544,   79,   79,   79,  555,
    79,  139,  547,  151,   79,   79,   79,   79,   79,   79,
    79,   79,  187,   79,  139,  551,   79,  188,   79,  211,
    79,  190,   79,  135,   79,  191,  549,  151,   79,  189,
    79,  553,   79,  193,   79,  554,  151,   79,  135,  151,
    79,  145,  556,  139,   79,  562,   79,  138,   79,  151,
    79,   79,   79,   79,   79,  194,   71,   79,  195,   79,
    559,   79,  137,   79,  135,   79,  199,   79,   79,   79,

    79,   79,   77,  197,   75,  196,   79,   71,   79,   79,
    198,  567,   79,  567,  561,   79,  567,   79,  564,   79,
    200,   79,  567,   79,  567,   79,   79,   79,   79,   79,
    567,  566,   79,  567,   79,  567,   79,  567,   79,  567,
    79,  567,   79,   79,   79,  201,  202,  567,  567,   79,
    204,   79,  567,   79,  567,   79,  567,   79,  567,  206,
    79,   79,   79,   79,  567,  567,  567,  567,   79,  567,
    79,  567,   79,   79,   79,  567,  214,  567,  209,   79,
    567,  567,  567,   79,   79,   79,  567,   79,  567,  567,
    79,  215,   79,  567,   79,  567,   79,  567,   79,  567,

    79,   79,   79,   79,   79,  567,  567,  567,  567,   79,
    567,  216,   79,   79,  567,   79,  567,  567,  567,  567,
    79,  567,   79,   79,   79,  217,   79,  567,  567,   79,
    218,   79,  567,   79,  567,   79,  567,   79,  567,   79,
    79,   79,   79,   79,  567,  567,   79,  567,   79,  567,
    79,  567,   79,  567,   79,  567,  220,  219,   79,   79,
    79,   79,   79,  567,  567,   79,  567,  567,  567,  222,
    567,   79,   79,   79,   79,   79,   79,  221,   79,   79,
    79,   79,  567,  567,  567,  567,  567,  567,   79,   79,
    79,   79,   79,  224,   79,  223,  567,   79,   79,  226,

    79,  567,  567,  567,   79,  567,   79,  227,   79,  567,
    79,  225,   79,   79,   79,   79,   79,  567,  228,   79,
    567,  567,  567,  567,  567,   79,   79,   79,   79,   79,
    79,   79,  567,  567,   79,   79,  567,   79,  567,  567,
    230,   79,  229,   79,  567,   79,  567,   79,   79,   79,
    79,   79,  567,  567,   79,  567,   79,  233,  231,  567,
    79,  232,   79,  567,   79,   79,   79,   79,   79,  567,
    567,  567,  567,   79,  567,   79,   79,   79,  567,   79,
    567,  567,  234,  567,   79,  567,   79,  235,   79,   79,
    79,  567,  567,  567,  567,   79,  567,   79,  567,   79,

    79,   79,  567,   79,  567,  567,  238,   79,   79,  239,
    240,   79,   79,  241,   79,   79,   79,  567,   79,   79,
    567,   79,  567,  567,  244,  242,  567,   79,   79,   79,
    79,   79,   79,   79,   79,   79,  243,   79,  245,   79,
    79,  567,  567,  567,  567,  567,  567,   79,  567,   79,
    79,   79,  567,   79,  567,  246,  567,   79,   79,   79,
    79,   79,   79,   79,   79,  567,   79,  567,  567,   79,
    248,   79,  567,   79,   79,   79,  567,   79,  567,  567,
    567,   79,  247,   79,  249,   79,   79,  567,   79,   79,
    79,  567,  251,   79,  567,   79,  567,  567,  252,   79,

    567,   79,  567,   79,  567,   79,   79,   79,   79,   79,
    567,  567,   79,  253,   79,  567,   79,  567,   79,  567,
    79,  567,   79,   79,   79,   79,   79,  567,  567,   79,
    567,   79,  567,   79,  567,   79,  567,   79,  567,   79,
    254,   79,   79,   79,   79,  567,  255,   79,   79,  567,
    567,  567,  567,  567,   79,   79,   79,  258,   79,   79,
    567,   79,  567,   79,  256,   79,   79,   79,   79,   79,
    567,  567,  567,  567,  259,  567,   79,  567,   79,  260,
    79,  567,   79,  567,   79,  567,   79,   79,   79,  567,
    79,  261,   79,  567,   79,   79,   79,  567,   79,  567,

    567,  567,   79,   79,   79,   79,   79,  567,  567,  567,
    262,   79,  567,   79,  567,   79,  567,   79,  567,   79,
    567,  567,  263,   79,   79,   79,   79,   79,  567,  265,
    264,  567,   79,  567,   79,  567,   79,  266,   79,  567,
    79,  567,   79,  567,   79,   79,   79,  567,   79,  567,
    567,  567,   79,   79,   79,  268,   79,  269,   79,   79,
    567,   79,  270,  567,  567,  275,  567,  567,   79,   79,
    79,   79,   79,   79,   79,   79,  567,  272,   79,  567,
    567,  567,  567,  567,   79,   79,  279,   79,   79,   79,
    79,  280,  567,   79,   79,  567,   79,  281,  567,  567,

    79,  567,   79,  567,   79,  567,   79,  282,   79,   79,
    79,   79,   79,  567,  567,   79,  567,  567,  567,  567,
    567,   79,   79,  283,   79,   79,   79,  286,   79,   79,
    79,   79,  285,  567,  567,  567,  567,  567,   79,   79,
    79,   79,   79,   79,   79,  287,  567,   79,   79,  567,
    79,  567,  567,  567,   79,  567,   79,  284,   79,  567,
    79,   79,   79,   79,   79,  567,  567,  288,  567,   79,
    567,   79,   79,   79,  289,   79,  567,  567,  567,  567,
    79,  567,   79,   79,   79,  567,   79,  567,  567,   79,
    290,   79,  567,   79,  567,   79,  567,   79,  567,   79,

    567,  292,  291,   79,   79,  567,  293,   79,   79,  567,
    294,  567,  567,  567,   79,   79,   79,   79,   79,   79,
    567,   79,  567,   79,  567,   79,   79,   79,   79,  295,
    567,  567,  567,  567,   79,  296,   79,  567,   79,  567,
    79,  567,   79,  567,   79,  567,   79,   79,   79,  567,
    79,  567,  297,  567,   79,   79,   79,  567,   79,   79,
    298,  567,  299,   79,  567,   79,  567,  567,  567,   79,
    567,   79,  567,   79,  567,   79,   79,   79,   79,   79,
    567,  567,   79,  567,   79,  567,   79,  567,   79,  567,
    79,  567,   79,  567,   79,   79,   79,   79,   79,  567,

    303,   79,  567,  567,  304,  567,  567,   79,   79,   79,
    79,   79,   79,   79,  305,  567,   79,   79,  307,   79,
    567,  302,  567,   79,  567,   79,  567,   79,  567,   79,
    79,   79,  306,   79,  310,  308,  567,  567,   79,  567,
    79,  567,   79,  567,   79,   79,  309,  567,   79,   79,
    567,  567,  567,  567,  567,   79,   79,   79,   79,   79,
    79,  311,   79,  567,   79,  567,   79,   79,   79,   79,
    79,  567,   79,  312,  567,   79,  567,  567,  567,   79,
    567,   79,   79,   79,   79,  567,   79,  313,   79,   79,
    315,   79,   79,  567,  567,  567,  318,  567,  567,   79,

    567,   79,   79,   79,   79,   79,   79,  567,   79,  567,
    316,   79,  567,   79,  567,   79,  567,   79,  317,   79,
    567,  567,  567,   79,   79,   79,   79,   79,  567,  319,
    567,  567,   79,  320,   79,  567,   79,   79,   79,  567,
    79,  567,  567,  567,   79,   79,   79,   79,   79,   79,
    567,   79,   79,   79,  567,  322,   79,  567,   79,  567,
    567,  567,   79,  567,   79,  567,   79,  567,   79,   79,
    79,   79,   79,  567,  324,   79,  567,   79,  567,   79,
    567,  323,  567,   79,  567,   79,   79,   79,   79,   79,
    567,  567,   79,  567,   79,  567,   79,  326,   79,  567,

    79,  567,   79,   79,   79,   79,   79,  567,  567,  567,
    567,   79,  567,   79,   79,   79,  567,   79,  567,  567,
    79,  567,   79,  567,   79,  567,   79,  567,   79,  567,
    79,  325,  328,   79,   79,   79,  567,  567,   79,   79,
    567,  330,  567,  567,  567,   79,  567,   79,   79,   79,
    79,  567,   79,   79,  329,  567,  332,   79,  567,   79,
    567,  567,  567,   79,  567,   79,  567,   79,  567,   79,
    79,   79,   79,   79,  567,  567,  567,  567,   79,  567,
    79,  567,   79,  567,   79,  337,   79,  567,  336,   79,
    567,  567,   79,  338,  567,  567,   79,  567,   79,  567,

    79,  567,   79,  567,   79,   79,   79,  339,   79,   79,
    567,   79,  567,  567,  567,  567,  567,  567,   79,   79,
    79,   79,   79,   79,  341,   79,  567,   79,   79,  567,
    567,   79,  342,  567,  567,   79,  567,   79,  567,   79,
    567,   79,  567,   79,   79,   79,   79,   79,  567,  343,
    79,  567,  567,  567,  567,  567,   79,   79,   79,   79,
    79,   79,   79,   79,  567,   79,   79,  567,  567,  567,
    567,  567,   79,   79,  344,   79,   79,   79,   79,  345,
    567,   79,   79,  567,   79,  567,  567,  347,  346,  567,
    79,  348,   79,  567,   79,  567,   79,   79,   79,   79,

    79,  349,  567,   79,  567,  567,  567,  567,  567,   79,
    79,   79,   79,   79,   79,   79,  350,  567,   79,   79,
    567,  567,  567,  567,  567,   79,  567,   79,  567,   79,
    79,  352,  567,  351,   79,  567,   79,  567,  567,  567,
    79,  567,   79,  567,   79,  567,   79,   79,   79,   79,
    79,  567,  567,   79,  353,   79,  567,   79,  567,  354,
    567,   79,  567,   79,   79,   79,   79,   79,  567,  567,
    567,  358,   79,  567,   79,  567,   79,  567,   79,   79,
    359,  567,   79,   79,  567,   79,  567,  361,  567,   79,
    567,   79,   79,   79,   79,   79,   79,   79,   79,   79,

    360,   79,   79,   79,   79,  567,  363,  567,  567,  567,
    365,  567,   79,   79,  362,   79,   79,   79,   79,   79,
    567,   79,   79,  366,  567,  567,  567,  567,   79,   79,
    79,   79,   79,   79,   79,  364,  567,   79,   79,  567,
    79,  567,  567,  567,   79,  567,   79,  567,   79,  567,
    79,   79,   79,   79,   79,  567,  567,   79,  367,   79,
    567,   79,  567,   79,  567,   79,  567,   79,   79,   79,
    79,   79,  567,  567,   79,  369,   79,  567,   79,  567,
    79,  567,   79,  567,   79,   79,  370,   79,   79,  567,
    567,   79,  371,   79,  567,   79,  567,   79,  567,   79,

    567,   79,   79,  372,   79,   79,  567,  567,  567,  567,
    79,  567,   79,   79,   79,  567,   79,  567,  567,   79,
    373,   79,  567,   79,  376,  375,  567,   79,  567,   79,
    79,   79,   79,   79,  567,  567,   79,  567,   79,  567,
    79,  567,   79,  379,   79,  567,   79,   79,   79,   79,
    79,  567,  377,   79,  567,   79,  381,   79,  567,   79,
    567,   79,  567,   79,   79,   79,   79,   79,  567,  567,
    567,  567,   79,  567,   79,   79,   79,  567,   79,  567,
    382,   79,  567,   79,  567,   79,  567,   79,  567,   79,
    567,   79,  567,   79,   79,   79,   79,  387,  388,   79,

    79,  567,   79,  567,  567,  567,   79,  567,   79,   79,
    79,   79,   79,   79,   79,   79,   79,   79,   79,  567,
    389,   79,  567,   79,  567,  567,  567,   79,  567,  391,
    567,   79,  567,   79,   79,   79,   79,   79,  567,  567,
    79,  392,   79,  393,   79,  567,   79,  567,   79,  567,
    79,  567,   79,   79,   79,  394,   79,  567,  567,   79,
    567,  567,   79,  567,  567,  567,   79,  567,   79,  567,
    79,  567,   79,  567,   79,   79,   79,   79,  567,  396,
    395,   79,  567,   79,  567,  567,  567,   79,  567,   79,
    567,   79,  567,   79,  567,   79,   79,   79,  399,   79,

    79,  397,   79,  398,  567,  567,  567,  567,  567,   79,
    79,   79,   79,   79,   79,   79,   79,  567,   79,   79,
    567,  567,  567,  400,  567,   79,   79,   79,   79,   79,
    79,   79,  567,  567,   79,   79,  402,   79,  567,  567,
    567,   79,  567,   79,  567,   79,  567,   79,  401,   79,
    79,   79,   79,   79,  567,  567,   79,  406,  567,  407,
    567,  567,   79,   79,   79,   79,   79,   79,   79,  567,
    567,   79,   79,  567,   79,  567,  567,  409,   79,  567,
    79,  567,   79,  567,   79,  408,   79,   79,   79,   79,
    410,  567,  567,   79,  567,   79,  567,  567,  567,   79,

    567,   79,  567,   79,  567,   79,  567,   79,   79,   79,
    79,  411,  567,  412,   79,  567,   79,  567,  567,  567,
    79,  567,   79,  567,   79,  567,   79,   79,   79,   79,
    79,  567,  567,  413,  414,   79,  567,   79,   79,   79,
    567,   79,  567,  567,   79,  567,   79,  567,   79,  567,
    79,  415,   79,  567,   79,  567,   79,   79,   79,  417,
    79,   79,  567,   79,  567,  567,  567,  567,  567,  567,
    79,   79,   79,  418,   79,   79,   79,  567,  567,   79,
    79,  567,  567,  567,  567,  567,   79,  567,   79,   79,
    79,  567,  420,  567,  419,   79,  567,   79,  422,   79,

    79,   79,  567,   79,  567,  567,  567,   79,   79,   79,
    79,   79,   79,   79,   79,  567,   79,  567,  567,   79,
    567,   79,  567,   79,   79,   79,  424,   79,  567,  567,
    567,   79,   79,   79,   79,   79,   79,   79,   79,  567,
    79,  567,  567,   79,  567,   79,  567,   79,   79,   79,
    567,   79,  567,  567,  426,   79,   79,   79,   79,   79,
    79,   79,   79,  431,   79,  567,  432,   79,  433,   79,
    567,   79,  567,   79,  567,   79,  567,  567,  567,   79,
    79,   79,   79,   79,  567,  435,  567,  567,   79,  567,
    79,  567,   79,  567,   79,  567,   79,  567,   79,  567,

    79,   79,  436,  567,   79,  437,   79,  567,   79,   79,
    79,  567,   79,  567,   79,  567,   79,   79,   79,  567,
    79,  567,   79,  567,   79,   79,   79,  567,   79,  438,
    567,  567,   79,   79,   79,   79,   79,  439,   79,  567,
    567,   79,  567,  567,  567,   79,  567,   79,   79,   79,
    79,   79,   79,  567,   79,  567,  440,   79,  567,  567,
    567,   79,   79,   79,  567,   79,  567,  567,   79,  441,
    79,  567,   79,  567,   79,  567,   79,  567,  442,   79,
    79,   79,   79,  567,  567,   79,  446,   79,  567,   79,
    567,   79,  567,   79,  567,   79,   79,   79,   79,   79,

    567,  567,   79,  447,   79,  567,   79,  567,   79,  567,
    79,  567,   79,  567,   79,   79,   79,   79,   79,  448,
    449,   79,  567,  567,  567,  567,  567,   79,   79,   79,
    79,   79,   79,   79,  450,  567,   79,   79,  567,   79,
    567,  567,  567,   79,  567,   79,  567,   79,  567,   79,
    79,   79,   79,   79,  567,  567,   79,  567,   79,  567,
    79,  567,  452,  567,   79,  567,   79,   79,  453,   79,
    79,  567,  567,  567,  567,   79,  567,  455,   79,   79,
    567,   79,  456,  567,  451,  567,   79,  567,   79,   79,
    79,  567,   79,  567,  567,   79,  567,   79,  567,   79,

    567,   79,  567,   79,  567,   79,  567,   79,   79,   79,
    79,  567,  567,  458,   79,  567,   79,  567,  567,  460,
    79,  468,   79,  567,   79,  567,   79,  567,   79,   79,
    79,  462,   79,  567,  567,   79,  567,  567,   79,  567,
    567,  567,   79,  567,   79,  567,   79,  567,   79,   79,
    79,   79,   79,  567,  567,  567,  469,   79,  567,   79,
    567,   79,  567,   79,   79,  470,  567,  567,   79,  567,
    79,  567,  567,  567,   79,  567,   79,  567,   79,  567,
    79,   79,   79,   79,   79,  567,  472,  567,  567,   79,
    567,   79,   79,   79,  567,   79,  567,  567,  567,  473,

    79,  567,   79,   79,  474,  567,   79,  567,  567,   79,
    567,   79,  567,   79,  567,   79,  475,   79,  567,   79,
    567,   79,   79,   79,   79,   79,  567,  476,   79,  567,
    567,  567,  567,  567,   79,   79,   79,   79,   79,   79,
    79,  567,  567,   79,   79,  567,   79,  567,  567,  480,
    79,  567,   79,  567,   79,  567,   79,   79,   79,   79,
    79,  567,  567,   79,  567,   79,  567,   79,  567,   79,
    567,   79,  567,   79,   79,   79,   79,   79,  567,  567,
    79,  567,   79,  567,   79,  567,   79,  567,   79,  567,
    79,   79,   79,   79,   79,  483,  567,   79,  481,   79,

    567,   79,  567,   79,  567,   79,  567,   79,   79,   79,
    79,   79,  567,  567,   79,  567,   79,  567,   79,  567,
    79,  485,   79,  567,   79,   79,   79,   79,   79,  567,
    567,   79,  567,   79,  567,   79,  567,   79,  567,   79,
    567,   79,   79,  488,   79,   79,  567,  567,   79,  567,
    79,  567,  490,  567,   79,  567,   79,  567,   79,   79,
    79,   79,   79,  567,  567,  494,  567,   79,  567,   79,
    79,   79,  495,   79,  567,  567,   79,  567,   79,  567,
    79,  567,   79,  567,   79,  567,   79,   79,   79,   79,
    79,  567,  567,   79,  567,   79,  497,   79,  567,   79,

    567,   79,  567,   79,  496,   79,   79,   79,   79,   79,
    567,  499,   79,  567,  567,  567,  567,  567,   79,   79,
    498,   79,   79,   79,   79,   79,  567,   79,   79,  567,
    567,  567,  503,  567,   79,   79,   79,   79,   79,   79,
    502,   79,   79,   79,   79,  567,  567,  567,  505,  567,
    567,   79,   79,   79,  507,   79,   79,   79,   79,  567,
    79,   79,  567,  567,  567,  567,  567,   79,   79,   79,
    79,   79,   79,   79,   79,  509,   79,   79,  567,  567,
    567,  567,  567,   79,   79,   79,  515,   79,   79,   79,
    567,  567,   79,   79,  567,   79,  514,  516,  567,   79,

    567,   79,  567,   79,  567,   79,   79,   79,   79,   79,
    567,  567,   79,  567,   79,  567,   79,  567,   79,  567,
    79,  567,   79,  517,   79,   79,   79,   79,  567,  567,
    79,   79,  567,  567,  567,  567,  567,   79,   79,   79,
    79,   79,   79,  520,   79,  567,   79,  567,   79,   79,
    522,   79,   79,  567,  567,  567,  567,   79,  524,   79,
    567,   79,   79,   79,  567,   79,  526,  567,  567,   79,
    79,   79,   79,   79,  531,   79,   79,  567,   79,  567,
    567,   79,  567,   79,  567,   79,   79,   79,  567,   79,
    567,  567,  567,   79,   79,   79,   79,   79,   79,   79,

    79,  567,   79,  567,  567,   79,  567,   79,  567,   79,
    79,  534,  567,   79,  536,  567,  567,   79,   79,   79,
    79,   79,   79,   79,   79,  567,   79,  540,  538,   79,
    567,   79,  567,   79,   79,   79,  567,   79,  567,  567,
    567,   79,   79,   79,   79,   79,   79,   79,   79,  545,
    79,  567,  567,   79,  567,  567,  567,   79,   79,   79,
    567,   79,  567,  567,   79,  548,   79,  567,   79,  567,
    79,  552,   79,  567,   79,  567,   79,   79,   79,  557,
    79,  550,  567,   79,  567,  567,   79,  567,  567,  567,
    79,  567,   79,  567,   79,  567,   79,  567,   79,   79,

    79,   79,  567,  567,   79,   79,  567,  560,  567,  558,
    567,   79,   79,   79,   79,   79,   79,  567,   79,  567,
    79,  567,   79,   79,   79,   79,   79,  567,  567,  567,
    567,   79,  567,   79,  563,   79,   79,   79,  567,   79,
    567,  567,  567,   79,   79,   79,   79,   79,   79,  565,
    79,   79,   79,  567,  567,   79,  567,  567,  567,  567,
    567,   79,  567,   79,  567,   79,  567,  567,  567,  567,
    79,   56,   56,   56,   59,   59,   59,   63,   63,   63,
    67,   67,   67,   70,   70,   70,  136,  136,  140,  140,
    85,   85,  210,  210,  210,   11,  567,  567,  567,  567,

    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567
} ;

static yyconst short int yy_chk[3678] = {
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    4,    5,    6,    9,   10,  111,    7,  273,
    8,    3,    4,    7,    7,    8,    8,   17,  100,   73,

    17,   25,   25,   25,   25,   25,   25,   25,   33,  129,
    74,   33,   73,  205,  171,   33,   74,  356,   33,   33,
    33,   33,   33,   34,  119,  170,  184,   33,  101,   34,
    573,   33,  566,   34,   36,   34,   34,   34,    9,   10,
    564,  562,   34,  111,   36,   36,   36,  273,   36,  212,
    192,  131,  212,   36,  430,  100,   36,  430,  556,    5,
    6,    5,    6,   32,  129,  356,   32,   32,   32,   32,
    32,   32,   32,  171,  101,  170,  184,  205,  119,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

    32,   32,   32,   32,   32,  131,  133,  192,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    32,   32,   32,   32,   32,   32,   32,   32,   32,   35,
    300,  274,   35,  553,   37,   37,  203,  236,  250,   35,
    257,   35,  208,   35,  334,   37,   38,   37,   35,   37,
    549,   37,   39,  207,   37,  133,   38,  267,   38,  237,
    38,  284,   39,  301,   39,   38,   39,  133,  547,  314,
    546,   39,   40,   40,  535,   40,  300,  271,  274,   38,
    41,   41,  333,   40,   40,   40,  203,   40,   41,   38,
    40,   41,   40,   41,   42,   41,  208,  236,  250,  334,

    41,  302,  257,  207,   42,  325,   42,   42,   42,  331,
    43,   43,  237,   42,   43,  368,   44,  301,   44,  267,
    43,  284,   43,  314,   43,  321,   44,  271,   44,   43,
    44,   45,   44,  355,   45,   44,  327,  374,  340,   46,
    42,   45,   46,   45,  333,   45,   46,   47,  357,   46,
    45,   46,  427,   46,  487,   47,   47,   46,   46,   44,
    378,  302,   46,  368,   48,  325,   47,  479,   47,  331,
    47,  321,   47,  380,   48,   47,   48,  384,   48,   47,
    49,   49,  471,   48,  374,  383,  327,   50,  355,   47,
    385,   49,  340,   49,   50,   49,  390,   50,  427,   50,

    49,   50,  357,  403,   48,   78,   50,   76,   76,   76,
    76,   76,   76,   76,  378,   78,   79,   78,   49,   78,
    428,  404,   80,  416,   78,  425,   79,  384,   79,  434,
    79,  429,   80,   81,   80,   79,   80,  403,  380,   80,
    385,   80,  445,   81,   82,   81,  383,   81,  405,  421,
    83,  451,   81,  390,   82,  404,   82,  416,   82,  425,
    83,   84,   83,   82,   83,  429,  423,   82,  443,   83,
    467,   84,   86,   84,  457,   84,  463,   86,   87,   84,
    84,  434,   86,  444,   86,  428,   86,  504,   87,   88,
    87,   86,   87,  466,  445,  454,   87,   87,  461,   88,

    89,   88,  459,   88,  421,  405,   90,  482,   88,  464,
    89,  451,   89,   89,   89,  477,   90,  386,   90,   89,
    90,   91,   91,  423,  457,   90,  335,   92,   92,  500,
    443,  463,   91,  278,   91,   91,   91,  465,   92,   93,
    92,   91,   92,  464,  504,  444,  501,   92,  478,   93,
    93,   93,   94,   93,  459,   95,   94,  454,   93,  277,
    461,  482,   94,  484,   94,   95,   94,   95,   96,   95,
    96,   94,  276,  492,   95,  477,   97,   97,   96,   98,
    96,  486,   96,  500,  506,  510,   97,   96,   97,   98,
    97,   98,   99,   98,   97,   97,  518,  102,   98,  465,

    501,  489,   99,  521,   99,   99,   99,  102,  478,  519,
    103,   99,  491,  103,  493,  486,  513,  102,  104,  102,
    103,  102,  103,  484,  103,  512,  102,  508,  104,  103,
    104,  511,  104,  105,  105,  492,  525,  104,  506,  510,
    532,  523,  528,  105,  106,  105,  491,  105,  527,  213,
    105,  105,  105,  518,  106,  521,  106,  106,  106,  107,
    107,  489,  211,  106,  529,  108,  519,  210,  530,  107,
    513,  107,  543,  107,  493,  108,  109,  108,  107,  108,
    533,  107,  151,  142,  108,  512,  109,  110,  109,  508,
    109,  539,  532,  511,  109,  109,  525,  110,  523,  110,

    112,  110,  528,  113,  537,  527,  110,  141,  112,  541,
    112,  542,  112,  113,  112,  113,  114,  113,  529,  112,
    544,  113,  113,  555,  115,  530,  114,  116,  114,  543,
    114,  140,  533,  551,  115,  114,  115,  116,  115,  116,
    117,  116,  115,  115,  139,  539,  116,  116,  118,  138,
    117,  118,  117,  136,  117,  118,  537,  554,  118,  117,
    118,  541,  118,  120,  120,  542,  559,  118,  135,   85,
    121,   77,  544,   72,  120,  555,  120,   71,  120,  561,
    121,  122,  121,  120,  121,  121,   70,  123,  121,  121,
    551,  122,   58,  122,   53,  122,  125,  123,  124,  123,

    122,  123,   26,  123,   22,  122,  123,   15,  124,  125,
    124,   11,  124,    0,  554,  126,    0,  124,  559,  125,
    126,  125,    0,  125,    0,  126,  127,  126,  125,  126,
    0,  561,  128,    0,  126,    0,  127,    0,  127,    0,
    127,    0,  128,  130,  128,  127,  128,    0,    0,  132,
    130,  128,    0,  130,    0,  130,    0,  130,    0,  132,
    134,  132,  130,  132,    0,    0,    0,    0,  132,    0,
    134,    0,  134,  146,  134,    0,  146,    0,  134,  134,
    0,    0,    0,  146,  147,  146,    0,  146,    0,    0,
    148,  146,  146,    0,  147,    0,  147,    0,  147,    0,

    148,  149,  148,  147,  148,    0,    0,    0,    0,  148,
    0,  149,  150,  149,    0,  149,    0,    0,    0,    0,
    149,    0,  150,  152,  150,  150,  150,    0,    0,  153,
    152,  150,    0,  152,    0,  152,    0,  152,    0,  153,
    154,  153,  152,  153,    0,    0,  155,    0,  153,    0,
    154,    0,  154,    0,  154,    0,  155,  154,  155,  154,
    155,  156,  157,    0,    0,  155,    0,    0,    0,  157,
    0,  156,  157,  156,  157,  156,  157,  156,  158,  159,
    156,  157,    0,    0,    0,    0,    0,    0,  158,  159,
    158,  159,  158,  159,  160,  158,    0,  158,  159,  161,

    161,    0,    0,    0,  160,    0,  160,  161,  160,    0,
    161,  160,  161,  160,  161,  162,  163,    0,  162,  161,
    0,    0,    0,    0,    0,  162,  163,  162,  163,  162,
    163,  164,    0,    0,  162,  163,    0,  165,    0,    0,
    165,  164,  164,  164,    0,  164,    0,  165,  166,  165,
    164,  165,    0,    0,  167,    0,  165,  167,  166,    0,
    166,  166,  166,    0,  167,  168,  167,  166,  167,    0,
    0,    0,    0,  167,    0,  168,  169,  168,    0,  168,
    0,    0,  168,    0,  168,    0,  169,  169,  169,  172,
    169,    0,    0,    0,    0,  169,    0,  173,    0,  172,

    174,  172,    0,  172,    0,    0,  172,  173,  172,  173,
    174,  173,  174,  174,  174,  175,  173,    0,  176,  174,
    0,  177,    0,    0,  177,  175,    0,  175,  176,  175,
    176,  177,  176,  177,  175,  177,  176,  176,  178,  179,
    177,    0,    0,    0,    0,    0,    0,  178,    0,  179,
    180,  179,    0,  179,    0,  179,    0,  178,  179,  178,
    180,  178,  180,  181,  180,    0,  178,    0,    0,  180,
    182,  182,    0,  181,  183,  181,    0,  181,    0,    0,
    0,  182,  181,  182,  183,  182,  183,    0,  183,  185,
    182,    0,  185,  183,    0,  186,    0,    0,  186,  185,

    0,  185,    0,  185,    0,  186,  187,  186,  185,  186,
    0,    0,  188,  187,  186,    0,  187,    0,  187,    0,
    187,    0,  188,  189,  188,  187,  188,    0,    0,  190,
    0,  188,    0,  189,    0,  189,    0,  189,    0,  190,
    189,  190,  189,  190,  191,    0,  190,  193,  190,    0,
    0,    0,    0,    0,  191,  194,  191,  193,  191,  193,
    0,  193,    0,  191,  191,  194,  193,  194,  195,  194,
    0,    0,    0,    0,  194,    0,  196,    0,  195,  196,
    195,    0,  195,    0,  197,    0,  196,  195,  196,    0,
    196,  197,  198,    0,  197,  196,  197,    0,  197,    0,

    0,    0,  198,  197,  198,  199,  198,    0,    0,    0,
    198,  198,    0,  200,    0,  199,    0,  199,    0,  199,
    0,    0,  199,  200,  199,  200,  201,  200,    0,  201,
    200,    0,  200,    0,  202,    0,  201,  202,  201,    0,
    201,    0,  204,    0,  202,  201,  202,    0,  202,    0,
    0,    0,  204,  202,  204,  204,  204,  204,  206,  209,
    0,  204,  204,    0,    0,  209,    0,    0,  206,  209,
    206,  209,  206,  209,  214,  215,    0,  206,  209,    0,
    0,    0,    0,    0,  214,  215,  214,  215,  214,  215,
    216,  215,    0,  214,  215,    0,  217,  216,    0,    0,

    216,    0,  216,    0,  216,    0,  217,  217,  217,  216,
    217,  218,  219,    0,    0,  217,    0,    0,    0,    0,
    0,  218,  219,  218,  219,  218,  219,  221,  221,  220,
    218,  219,  220,    0,    0,    0,    0,    0,  221,  220,
    221,  220,  221,  220,  222,  222,    0,  221,  220,    0,
    223,    0,    0,    0,  222,    0,  222,  219,  222,    0,
    223,  224,  223,  222,  223,    0,    0,  223,    0,  223,
    0,  224,  225,  224,  224,  224,    0,    0,    0,    0,
    224,    0,  225,  226,  225,    0,  225,    0,    0,  227,
    225,  225,    0,  226,    0,  226,    0,  226,    0,  227,

    0,  227,  226,  227,  228,    0,  228,  229,  227,    0,
    229,    0,    0,    0,  228,  230,  228,  229,  228,  229,
    0,  229,    0,  228,    0,  230,  229,  230,  231,  230,
    0,    0,    0,    0,  230,  231,  232,    0,  231,    0,
    231,    0,  231,    0,  233,    0,  232,  231,  232,    0,
    232,    0,  232,    0,  233,  232,  233,    0,  233,  234,
    233,    0,  234,  233,    0,  235,    0,    0,    0,  234,
    0,  234,    0,  234,    0,  235,  238,  235,  234,  235,
    0,    0,  239,    0,  235,    0,  238,    0,  238,    0,
    238,    0,  239,    0,  239,  238,  239,  240,  241,    0,

    239,  239,    0,    0,  240,    0,    0,  240,  241,  240,
    241,  240,  241,  242,  241,    0,  240,  241,  243,  243,
    0,  238,    0,  242,    0,  242,    0,  242,    0,  243,
    244,  243,  242,  243,  245,  244,    0,    0,  243,    0,
    244,    0,  244,    0,  244,  245,  244,    0,  246,  244,
    0,    0,    0,    0,    0,  245,  247,  245,  246,  245,
    246,  246,  246,    0,  245,    0,  247,  246,  247,  248,
    247,    0,  249,  247,    0,  247,    0,    0,    0,  248,
    0,  248,  249,  248,  249,    0,  249,  248,  248,  251,
    251,  249,  252,    0,    0,    0,  254,    0,    0,  251,

    0,  251,  252,  251,  252,  253,  252,    0,  251,    0,
    252,  252,    0,  254,    0,  253,    0,  253,  253,  253,
    0,    0,    0,  254,  253,  254,  255,  254,    0,  255,
    0,    0,  254,  256,  256,    0,  255,  258,  255,    0,
    255,    0,    0,    0,  256,  255,  256,  258,  256,  258,
    0,  258,  259,  256,    0,  259,  258,    0,  260,    0,
    0,    0,  259,    0,  259,    0,  259,    0,  260,  261,
    260,  259,  260,    0,  262,  262,    0,  260,    0,  261,
    0,  261,    0,  261,    0,  262,  263,  262,  261,  262,
    0,    0,  264,    0,  262,    0,  263,  266,  263,    0,

    263,    0,  264,  265,  264,  263,  264,    0,    0,    0,
    0,  264,    0,  265,  266,  265,    0,  265,    0,    0,
    268,    0,  265,    0,  266,    0,  266,    0,  266,    0,
    268,  263,  268,  266,  268,  269,    0,    0,  270,  268,
    0,  270,    0,    0,    0,  269,    0,  269,  270,  269,
    270,    0,  270,  272,  269,    0,  272,  270,    0,  275,
    0,    0,    0,  272,    0,  272,    0,  272,    0,  275,
    279,  275,  272,  275,    0,    0,    0,    0,  275,    0,
    279,    0,  279,    0,  279,  280,  280,    0,  279,  279,
    0,    0,  281,  281,    0,    0,  280,    0,  280,    0,

    280,    0,  281,    0,  281,  280,  281,  282,  282,  283,
    0,  281,    0,    0,    0,    0,    0,    0,  282,  283,
    282,  283,  282,  283,  285,  285,    0,  282,  283,    0,
    0,  286,  286,    0,    0,  285,    0,  285,    0,  285,
    0,  286,    0,  286,  285,  286,  287,  288,    0,  287,
    286,    0,    0,    0,    0,    0,  287,  288,  287,  288,
    287,  288,  289,  290,    0,  287,  288,    0,    0,    0,
    0,    0,  289,  290,  289,  290,  289,  290,  291,  290,
    0,  289,  290,    0,  292,    0,    0,  292,  291,    0,
    291,  292,  291,    0,  292,    0,  292,  291,  292,  293,

    294,  293,    0,  292,    0,    0,    0,    0,    0,  293,
    294,  293,  294,  293,  294,  295,  294,    0,  293,  294,
    0,    0,    0,    0,    0,  295,    0,  295,    0,  295,
    296,  296,    0,  295,  295,    0,  297,    0,    0,    0,
    296,    0,  296,    0,  296,    0,  297,  298,  297,  296,
    297,    0,    0,  299,  297,  297,    0,  298,    0,  298,
    0,  298,    0,  299,  303,  299,  298,  299,    0,    0,
    0,  303,  299,    0,  303,    0,  303,    0,  303,  304,
    304,    0,  305,  303,    0,  306,    0,  306,    0,  304,
    0,  304,  305,  304,  305,  306,  305,  306,  304,  306,

    305,  305,  307,  308,  306,    0,  308,    0,    0,    0,
    310,    0,  307,  308,  307,  308,  307,  308,  309,  310,
    0,  307,  308,  312,    0,    0,    0,    0,  309,  310,
    309,  310,  309,  310,  311,  309,    0,  309,  310,    0,
    312,    0,    0,    0,  311,    0,  311,    0,  311,    0,
    312,  313,  312,  311,  312,    0,    0,  315,  313,  312,
    0,  313,    0,  313,    0,  313,    0,  315,  316,  315,
    313,  315,    0,    0,  317,  315,  315,    0,  316,    0,
    316,    0,  316,    0,  317,  318,  317,  316,  317,    0,
    0,  319,  318,  317,    0,  318,    0,  318,    0,  318,

    0,  319,  320,  319,  318,  319,    0,    0,    0,    0,
    319,    0,  320,  322,  320,    0,  320,    0,    0,  323,
    320,  320,    0,  322,  323,  322,    0,  322,    0,  323,
    324,  323,  322,  323,    0,    0,  326,    0,  323,    0,
    324,    0,  324,  326,  324,    0,  326,  328,  326,  324,
    326,    0,  324,  329,    0,  326,  329,  328,    0,  328,
    0,  328,    0,  329,  330,  329,  328,  329,    0,    0,
    0,    0,  329,    0,  330,  332,  330,    0,  330,    0,
    330,  336,    0,  330,    0,  332,    0,  332,    0,  332,
    0,  336,    0,  336,  332,  336,  337,  337,  338,  338,

    336,    0,  339,    0,    0,    0,  337,    0,  337,  338,
    337,  338,  339,  338,  339,  337,  339,  341,  338,    0,
    339,  339,    0,  342,    0,    0,    0,  341,    0,  341,
    0,  341,    0,  342,  343,  342,  341,  342,    0,    0,
    344,  342,  342,  344,  343,    0,  343,    0,  343,    0,
    344,    0,  344,  343,  344,  345,  345,    0,    0,  344,
    0,    0,  346,    0,    0,    0,  345,    0,  345,    0,
    345,    0,  346,    0,  346,  345,  346,  347,    0,  347,
    346,  346,    0,  348,    0,    0,    0,  347,    0,  347,
    0,  347,    0,  348,    0,  348,  347,  348,  350,  350,

    349,  348,  348,  349,    0,    0,    0,    0,    0,  350,
    349,  350,  349,  350,  349,  351,  352,    0,  350,  349,
    0,    0,    0,  352,    0,  351,  352,  351,  352,  351,
    352,  353,    0,    0,  351,  352,  354,  354,    0,    0,
    0,  353,    0,  353,    0,  353,    0,  354,  353,  354,
    353,  354,  359,  358,    0,    0,  354,  358,    0,  359,
    0,    0,  359,  358,  359,  358,  359,  358,  360,    0,
    0,  359,  358,    0,  361,    0,    0,  361,  360,    0,
    360,    0,  360,    0,  361,  360,  361,  360,  361,  362,
    362,    0,    0,  361,    0,  363,    0,    0,    0,  362,

    0,  362,    0,  362,    0,  363,    0,  363,  362,  363,
    364,  363,    0,  364,  363,    0,  365,    0,    0,    0,
    364,    0,  364,    0,  364,    0,  365,  366,  365,  364,
    365,    0,    0,  365,  366,  365,    0,  366,  367,  366,
    0,  366,    0,    0,  369,    0,  366,    0,  367,    0,
    367,  367,  367,    0,  369,    0,  369,  367,  369,  370,
    370,  371,    0,  369,    0,    0,    0,    0,    0,    0,
    370,  371,  370,  371,  370,  371,  372,    0,    0,  370,
    371,    0,    0,    0,    0,    0,  372,    0,  372,  373,
    372,    0,  373,    0,  372,  372,    0,  375,  375,  373,

    376,  373,    0,  373,    0,    0,    0,  375,  373,  375,
    376,  375,  376,  377,  376,    0,  375,    0,    0,  376,
    0,  381,    0,  377,  379,  377,  379,  377,    0,    0,
    0,  381,  377,  381,  379,  381,  379,  382,  379,    0,
    381,    0,    0,  379,    0,  387,    0,  382,  388,  382,
    0,  382,    0,    0,  382,  387,  382,  387,  388,  387,
    388,  389,  388,  387,  387,    0,  388,  388,  389,  391,
    0,  389,    0,  389,    0,  389,    0,    0,    0,  391,
    389,  391,  392,  391,    0,  392,    0,    0,  391,    0,
    393,    0,  392,    0,  392,    0,  392,    0,  394,    0,

    393,  392,  393,    0,  393,  394,  395,    0,  394,  393,
    394,    0,  394,    0,  396,    0,  395,  394,  395,    0,
    395,    0,  397,    0,  396,  395,  396,    0,  396,  397,
    0,    0,  397,  396,  397,  398,  397,  398,  399,    0,
    0,  397,    0,    0,    0,  398,    0,  398,  399,  398,
    399,  400,  399,    0,  398,    0,  399,  399,    0,    0,
    0,  400,  401,  400,    0,  400,    0,    0,  402,  400,
    400,    0,  401,    0,  401,    0,  401,    0,  402,  406,
    402,  401,  402,    0,    0,  407,  406,  402,    0,  406,
    0,  406,    0,  406,    0,  407,  408,  407,  406,  407,

    0,    0,  409,  407,  407,    0,  408,    0,  408,    0,
    408,    0,  409,    0,  409,  408,  409,  410,  411,  409,
    410,  409,    0,    0,    0,    0,    0,  410,  411,  410,
    411,  410,  411,  412,  412,    0,  410,  411,    0,  413,
    0,    0,    0,  412,    0,  412,    0,  412,    0,  413,
    414,  413,  412,  413,    0,    0,  415,    0,  413,    0,
    414,    0,  414,    0,  414,    0,  415,  417,  415,  414,
    415,    0,    0,    0,    0,  415,    0,  417,  418,  417,
    0,  417,  418,    0,  413,    0,  417,    0,  418,  419,
    418,    0,  418,    0,    0,  420,    0,  418,    0,  419,

    0,  419,    0,  419,    0,  420,    0,  420,  419,  420,
    422,    0,    0,  422,  420,    0,  424,    0,    0,  424,
    422,  431,  422,    0,  422,    0,  424,    0,  424,  422,
    424,  426,  426,    0,    0,  424,    0,    0,  431,    0,
    0,    0,  426,    0,  426,    0,  426,    0,  431,  432,
    431,  426,  431,    0,    0,    0,  432,  431,    0,  432,
    0,  432,    0,  432,  433,  433,    0,    0,  432,    0,
    435,    0,    0,    0,  433,    0,  433,    0,  433,    0,
    435,  436,  435,  433,  435,    0,  435,    0,    0,  435,
    0,  436,  437,  436,    0,  436,    0,    0,    0,  436,

    436,    0,  437,  438,  437,    0,  437,    0,    0,  439,
    0,  437,    0,  438,    0,  438,  438,  438,    0,  439,
    0,  439,  438,  439,  440,  441,    0,  440,  439,    0,
    0,    0,    0,    0,  440,  441,  440,  441,  440,  441,
    442,    0,    0,  440,  441,    0,  446,    0,    0,  446,
    442,    0,  442,    0,  442,    0,  446,  447,  446,  442,
    446,    0,    0,  448,    0,  446,    0,  447,    0,  447,
    0,  447,    0,  448,  449,  448,  447,  448,    0,    0,
    450,    0,  448,    0,  449,    0,  449,    0,  449,    0,
    450,  452,  450,  449,  450,  452,    0,  453,  450,  450,

    0,  452,    0,  452,    0,  452,    0,  453,  455,  453,
    452,  453,    0,    0,  456,    0,  453,    0,  455,    0,
    455,  456,  455,    0,  456,  458,  456,  455,  456,    0,
    0,  460,    0,  456,    0,  458,    0,  458,    0,  458,
    0,  460,  462,  460,  458,  460,    0,    0,  468,    0,
    460,    0,  462,    0,  462,    0,  462,    0,  468,  469,
    468,  462,  468,    0,    0,  468,    0,  468,    0,  469,
    470,  469,  469,  469,    0,    0,  472,    0,  469,    0,
    470,    0,  470,    0,  470,    0,  472,  473,  472,  470,
    472,    0,    0,  474,    0,  472,  474,  473,    0,  473,

    0,  473,    0,  474,  473,  474,  473,  474,  475,  476,
    0,  476,  474,    0,    0,    0,    0,    0,  475,  476,
    475,  476,  475,  476,  480,  481,    0,  475,  476,    0,
    0,    0,  481,    0,  480,  481,  480,  481,  480,  481,
    480,  483,  485,  480,  481,    0,    0,    0,  483,    0,
    0,  483,  485,  483,  485,  483,  485,  488,  490,    0,
    483,  485,    0,    0,    0,    0,    0,  488,  490,  488,
    490,  488,  490,  494,  495,  488,  488,  490,    0,    0,
    0,    0,    0,  494,  495,  494,  495,  494,  495,  496,
    0,    0,  494,  495,    0,  497,  494,  497,    0,  496,

    0,  496,    0,  496,    0,  497,  498,  497,  496,  497,
    0,    0,  499,    0,  497,    0,  498,    0,  498,    0,
    498,    0,  499,  498,  499,  498,  499,  502,    0,    0,
    503,  499,    0,    0,    0,    0,    0,  502,  505,  502,
    503,  502,  503,  503,  503,    0,  502,    0,  505,  503,
    505,  507,  505,    0,    0,    0,    0,  505,  507,  509,
    0,  507,  514,  507,    0,  507,  509,    0,    0,  509,
    507,  509,  514,  509,  514,  515,  514,    0,  509,    0,
    0,  514,    0,  516,    0,  515,  517,  515,    0,  515,
    0,    0,    0,  516,  515,  516,  517,  516,  517,  520,

    517,    0,  516,    0,    0,  517,    0,  522,    0,  520,
    524,  520,    0,  520,  522,    0,    0,  522,  520,  522,
    524,  522,  524,  526,  524,    0,  522,  526,  524,  524,
    0,  531,    0,  526,  534,  526,    0,  526,    0,    0,
    0,  531,  526,  531,  534,  531,  534,  536,  534,  531,
    531,    0,    0,  534,    0,    0,    0,  536,  538,  536,
    0,  536,    0,    0,  540,  536,  536,    0,  538,    0,
    538,  540,  538,    0,  540,    0,  540,  538,  540,  545,
    545,  538,    0,  540,    0,    0,  548,    0,    0,    0,
    545,    0,  545,    0,  545,    0,  548,    0,  548,  545,

    548,  550,    0,    0,  552,  548,    0,  552,    0,  548,
    0,  550,  557,  550,  552,  550,  552,    0,  552,    0,
    550,    0,  557,  552,  557,  558,  557,    0,    0,    0,
    0,  557,    0,  560,  557,  558,  563,  558,    0,  558,
    0,    0,    0,  560,  558,  560,  563,  560,  563,  560,
    563,  565,  560,    0,    0,  563,    0,    0,    0,    0,
    0,  565,    0,  565,    0,  565,    0,    0,    0,    0,
    565,  568,  568,  568,  569,  569,  569,  570,  570,  570,
    571,  571,  571,  572,  572,  572,  574,  574,  575,  575,
    576,  576,  577,  577,  577,  567,  567,  567,  567,  567,

    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
    567,  567,  567,  567,  567,  567,  567
} ;

static yy_state_type yy_last_accepting_state;
static char* yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char* yytext;
#line 1 "asn_ref_lex.l"
#define INITIAL 0
#line 2 "asn_ref_lex.l"

/*
 * asn_ref_lex.l
 *
 * ASN lexical analysis file for typereference, objectclassreference, valuereference, ...
 *
 * Copyright (c) 2001 Institute for Information Industry
 * (http://www.iii.org.tw/iiia/ewelcome.htm)
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is ASN Parser.
 *
 * The Initial Developer of the Original Code is Institute for Information Industry
 *
 * Contributor(s): ___________________.
 *
 * $Log: asn_ref_lex.l,v $
 * Revision 1.3  2002/07/02 02:03:25  mangelo
 * Remove Pwlib dependency
 *
 * Revision 1.2  2001/09/07 22:37:32  mangelo
 * add Log keyword substitution
 *
 */

#include "main.h"
#include <iostream>
#include <algorithm>

#define YY_NEVER_INTERACTIVE 1

#include "asn_ref_grammar.h"

#define FALSE 0
#define TRUE  1

#include <ctype.h>
#define yylval idlval
#define yytext idtext
extern unsigned lineNumber;

int InParameterListContext = FALSE;

extern int LexEcho;
#define YYDEBUG 1
#define YY_USER_ACTION if (LexEcho) std::cout << idtext << std::flush;

extern "C" int yywrap() { return 1; }

int braceCount, parenthesisCount;

#define comment_line 1
#define brace 2
#define parenthesis 3
#define square_bracket 4


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO((int c, char* buf_ptr));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char*, yyconst char*, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char*));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int* yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( yy_current_buffer->yy_is_interactive ) \
    { \
        int c = '*', n; \
        for ( n = 0; n < max_size && \
                (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
            buf[n] = (char) c; \
        if ( c == '\n' ) \
            buf[n++] = (char) c; \
        if ( c == EOF && ferror( yyin ) ) \
            YY_FATAL_ERROR( "input in flex scanner failed" ); \
        result = n; \
    } \
    else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
              && ferror( yyin ) ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
    YY_USER_ACTION

YY_DECL {
    register yy_state_type yy_current_state;
    register char* yy_cp, *yy_bp;
    register int yy_act;

#line 66 "asn_ref_lex.l"



    if (yy_init) {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if (! yy_start)
            yy_start = 1;   /* first start state */

        if (! yyin)
            yyin = stdin;

        if (! yyout)
            yyout = stdout;

        if (! yy_current_buffer)
            yy_current_buffer =
            yy_create_buffer(yyin, YY_BUF_SIZE);

        yy_load_buffer_state();
    }

    while (1) {      /* loops until end-of-file is reached */
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start;
yy_match:
        do {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            if (yy_accept[yy_current_state]) {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
            }
            while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
                yy_current_state = (int) yy_def[yy_current_state];
                if (yy_current_state >= 568)
                    yy_c = yy_meta[(unsigned int) yy_c];
            }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
            ++yy_cp;
        } while (yy_base[yy_current_state] != 3596);

yy_find_action:
        yy_act = yy_accept[yy_current_state];
        if (yy_act == 0) {
            /* have to back up */
            yy_cp = yy_last_accepting_cpos;
            yy_current_state = yy_last_accepting_state;
            yy_act = yy_accept[yy_current_state];
        }

        YY_DO_BEFORE_ACTION;


do_action:  /* This label is used only to access EOF actions. */


        switch (yy_act) {
        /* beginning of action switch */
        case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = yy_hold_char;
            yy_cp = yy_last_accepting_cpos;
            yy_current_state = yy_last_accepting_state;
            goto yy_find_action;

        case 1:
            YY_RULE_SETUP
#line 68 "asn_ref_lex.l" 
            { return ASSIGNMENT; }
            YY_BREAK
        case 2:
            YY_RULE_SETUP
#line 70 "asn_ref_lex.l" 
            { return ABSENT; }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
#line 71 "asn_ref_lex.l" 
            { return ABSTRACT_SYNTAX; }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
#line 72 "asn_ref_lex.l" 
            { return ALL; }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
#line 73 "asn_ref_lex.l" 
            { return ANY; }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
#line 74 "asn_ref_lex.l" 
            { return APPLICATION; }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
#line 75 "asn_ref_lex.l" 
            { return AUTOMATIC; }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
#line 76 "asn_ref_lex.l" 
            { return BEGIN_t; }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
#line 77 "asn_ref_lex.l" 
            { return BIT; }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
#line 78 "asn_ref_lex.l" 
            { return BMPString; }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
#line 79 "asn_ref_lex.l" 
            { return BOOLEAN_t; }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
#line 80 "asn_ref_lex.l" 
            { return BY; }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
#line 81 "asn_ref_lex.l" 
            { return CHARACTER; }
            YY_BREAK
        case 14:
            YY_RULE_SETUP
#line 82 "asn_ref_lex.l" 
            { return CHOICE; }
            YY_BREAK
        case 15:
            YY_RULE_SETUP
#line 83 "asn_ref_lex.l" 
            { return CLASS; }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
#line 84 "asn_ref_lex.l" 
            { return COMPONENT; }
            YY_BREAK
        case 17:
            YY_RULE_SETUP
#line 85 "asn_ref_lex.l" 
            { return COMPONENTS; }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
#line 86 "asn_ref_lex.l" 
            { return CONSTRAINED; }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
#line 87 "asn_ref_lex.l" 
            { return DEFAULT; }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
#line 88 "asn_ref_lex.l" 
            { return DEFINED; }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
#line 89 "asn_ref_lex.l" 
            { return DEFINITIONS; }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
#line 90 "asn_ref_lex.l" 
            { return EMBEDDED; }
            YY_BREAK
        case 23:
            YY_RULE_SETUP
#line 91 "asn_ref_lex.l" 
            { return END; }
            YY_BREAK
        case 24:
            YY_RULE_SETUP
#line 92 "asn_ref_lex.l" 
            { return ENUMERATED; }
            YY_BREAK
        case 25:
            YY_RULE_SETUP
#line 93 "asn_ref_lex.l" 
            { return EXCEPT; }
            YY_BREAK
        case 26:
            YY_RULE_SETUP
#line 94 "asn_ref_lex.l" 
            { return EXPLICIT; }
            YY_BREAK
        case 27:
            YY_RULE_SETUP
#line 95 "asn_ref_lex.l" 
            { return EXPORTS; }
            YY_BREAK
        case 28:
            YY_RULE_SETUP
#line 96 "asn_ref_lex.l" 
            { return EXTERNAL; }
            YY_BREAK
        case 29:
            YY_RULE_SETUP
#line 97 "asn_ref_lex.l" 
            { return FALSE_t; }
            YY_BREAK
        case 30:
            YY_RULE_SETUP
#line 98 "asn_ref_lex.l" 
            { return FROM; }
            YY_BREAK
        case 31:
            YY_RULE_SETUP
#line 99 "asn_ref_lex.l" 
            { return GeneralString; }
            YY_BREAK
        case 32:
            YY_RULE_SETUP
#line 100 "asn_ref_lex.l" 
            { return GraphicString; }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
#line 101 "asn_ref_lex.l" 
            { return IA5String; }
            YY_BREAK
        case 34:
            YY_RULE_SETUP
#line 102 "asn_ref_lex.l" 
            { return TYPE_IDENTIFIER; }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
#line 103 "asn_ref_lex.l" 
            { return IDENTIFIER_t; }
            YY_BREAK
        case 36:
            YY_RULE_SETUP
#line 104 "asn_ref_lex.l" 
            { return IMPLICIT; }
            YY_BREAK
        case 37:
            YY_RULE_SETUP
#line 105 "asn_ref_lex.l" 
            { return IMPORTS; }
            YY_BREAK
        case 38:
            YY_RULE_SETUP
#line 106 "asn_ref_lex.l" 
            { return INCLUDES; }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
#line 107 "asn_ref_lex.l" 
            { return INSTANCE; }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
#line 108 "asn_ref_lex.l" 
            { return INTEGER_t; }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
#line 109 "asn_ref_lex.l" 
            { return INTERSECTION; }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
#line 110 "asn_ref_lex.l" 
            { return ISO646String; }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
#line 111 "asn_ref_lex.l" 
            { return MACRO; }
            YY_BREAK
        case 44:
            YY_RULE_SETUP
#line 112 "asn_ref_lex.l" 
            { return MAX; }
            YY_BREAK
        case 45:
            YY_RULE_SETUP
#line 113 "asn_ref_lex.l" 
            { return MIN; }
            YY_BREAK
        case 46:
            YY_RULE_SETUP
#line 114 "asn_ref_lex.l" 
            { return MINUS_INFINITY; }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
#line 115 "asn_ref_lex.l" 
            { return NOTATION; }
            YY_BREAK
        case 48:
            YY_RULE_SETUP
#line 116 "asn_ref_lex.l" 
            { return NULL_t; }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
#line 117 "asn_ref_lex.l" 
            { return NumericString; }
            YY_BREAK
        case 50:
            YY_RULE_SETUP
#line 118 "asn_ref_lex.l" 
            { return OBJECT; }
            YY_BREAK
        case 51:
            YY_RULE_SETUP
#line 119 "asn_ref_lex.l" 
            { return OCTET; }
            YY_BREAK
        case 52:
            YY_RULE_SETUP
#line 120 "asn_ref_lex.l" 
            { return OF_t; }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
#line 121 "asn_ref_lex.l" 
            { return OPTIONAL_t; }
            YY_BREAK
        case 54:
            YY_RULE_SETUP
#line 122 "asn_ref_lex.l" 
            { return PDV; }
            YY_BREAK
        case 55:
            YY_RULE_SETUP
#line 123 "asn_ref_lex.l" 
            { return PLUS_INFINITY; }
            YY_BREAK
        case 56:
            YY_RULE_SETUP
#line 124 "asn_ref_lex.l" 
            { return PRESENT; }
            YY_BREAK
        case 57:
            YY_RULE_SETUP
#line 125 "asn_ref_lex.l" 
            { return PrintableString; }
            YY_BREAK
        case 58:
            YY_RULE_SETUP
#line 126 "asn_ref_lex.l" 
            { return PRIVATE; }
            YY_BREAK
        case 59:
            YY_RULE_SETUP
#line 127 "asn_ref_lex.l" 
            { return REAL; }
            YY_BREAK
        case 60:
            YY_RULE_SETUP
#line 128 "asn_ref_lex.l" 
            { return SEQUENCE; }
            YY_BREAK
        case 61:
            YY_RULE_SETUP
#line 129 "asn_ref_lex.l" 
            { return SET; }
            YY_BREAK
        case 62:
            YY_RULE_SETUP
#line 130 "asn_ref_lex.l" 
            { return SIZE_t; }
            YY_BREAK
        case 63:
            YY_RULE_SETUP
#line 131 "asn_ref_lex.l" 
            { return STRING; }
            YY_BREAK
        case 64:
            YY_RULE_SETUP
#line 132 "asn_ref_lex.l" 
            { return SYNTAX; }
            YY_BREAK
        case 65:
            YY_RULE_SETUP
#line 133 "asn_ref_lex.l" 
            { return T61String; }
            YY_BREAK
        case 66:
            YY_RULE_SETUP
#line 134 "asn_ref_lex.l" 
            { return TAGS; }
            YY_BREAK
        case 67:
            YY_RULE_SETUP
#line 135 "asn_ref_lex.l" 
            { return TeletexString; }
            YY_BREAK
        case 68:
            YY_RULE_SETUP
#line 136 "asn_ref_lex.l" 
            { return TRUE_t; }
            YY_BREAK
        case 69:
            YY_RULE_SETUP
#line 137 "asn_ref_lex.l" 
            { return TYPE_t; }
            YY_BREAK
        case 70:
            YY_RULE_SETUP
#line 138 "asn_ref_lex.l" 
            { return UNION; }
            YY_BREAK
        case 71:
            YY_RULE_SETUP
#line 139 "asn_ref_lex.l" 
            { return UNIQUE; }
            YY_BREAK
        case 72:
            YY_RULE_SETUP
#line 140 "asn_ref_lex.l" 
            { return UNIVERSAL; }
            YY_BREAK
        case 73:
            YY_RULE_SETUP
#line 141 "asn_ref_lex.l" 
            { return UniversalString; }
            YY_BREAK
        case 74:
            YY_RULE_SETUP
#line 142 "asn_ref_lex.l" 
            { return VALUE; }
            YY_BREAK
        case 75:
            YY_RULE_SETUP
#line 143 "asn_ref_lex.l" 
            { return VideotexString; }
            YY_BREAK
        case 76:
            YY_RULE_SETUP
#line 144 "asn_ref_lex.l" 
            { return VisibleString; }
            YY_BREAK
        case 77:
            YY_RULE_SETUP
#line 145 "asn_ref_lex.l" 
            { return WITH; }
            YY_BREAK
        case 78:
            YY_RULE_SETUP
#line 148 "asn_ref_lex.l"
            {
                BEGIN(comment_line);
            }
            YY_BREAK
        case 79:
            YY_RULE_SETUP
#line 152 "asn_ref_lex.l"
            {
                BEGIN(INITIAL);
            }
            YY_BREAK
        case 80:
            YY_RULE_SETUP
#line 156 "asn_ref_lex.l"
            {
                lineNumber++;
                BEGIN(INITIAL);
            }
            YY_BREAK
        case 81:
            YY_RULE_SETUP
#line 161 "asn_ref_lex.l"
            {
            }
            YY_BREAK
        case YY_STATE_EOF(comment_line):
#line 164 "asn_ref_lex.l"
            {
                BEGIN(INITIAL);
            }
            YY_BREAK
        case 82:
            YY_RULE_SETUP
#line 168 "asn_ref_lex.l" 
            { return '@'; }
            YY_BREAK
        case 83:
            YY_RULE_SETUP
#line 170 "asn_ref_lex.l"
            {
                BEGIN(brace);
                braceCount++;
                return '{';
            }
            YY_BREAK
        case 84:
            YY_RULE_SETUP
#line 176 "asn_ref_lex.l" 
            { braceCount++; }
            YY_BREAK
        case 85:
            YY_RULE_SETUP
#line 178 "asn_ref_lex.l"
            {
                lineNumber++;
            }
            YY_BREAK
        case 86:
            YY_RULE_SETUP
#line 182 "asn_ref_lex.l"
            {
                if (--braceCount == 0) {
                    BEGIN(INITIAL);
                    return '}';
                }
            }
            YY_BREAK
        case 87:
            YY_RULE_SETUP
#line 190 "asn_ref_lex.l" 
            {  /* eat anything inside brace */ }
            YY_BREAK
        case 88:
            YY_RULE_SETUP
#line 193 "asn_ref_lex.l"
            {
                BEGIN(square_bracket);
                return '[';
            }
            YY_BREAK
        case 89:
            YY_RULE_SETUP
#line 198 "asn_ref_lex.l"
            {
                lineNumber++;
            }
            YY_BREAK
        case 90:
            YY_RULE_SETUP
#line 202 "asn_ref_lex.l"
            {
                BEGIN(INITIAL);
                return ']';
            }
            YY_BREAK
        case 91:
            YY_RULE_SETUP
#line 207 "asn_ref_lex.l" 
            {}
            YY_BREAK
        case 92:
            YY_RULE_SETUP
#line 209 "asn_ref_lex.l"
            {
                BEGIN(parenthesis);
                parenthesisCount++;
                return '(';
            }
            YY_BREAK
        case 93:
            YY_RULE_SETUP
#line 215 "asn_ref_lex.l"
            {
                if (--parenthesisCount == 0) {
                    BEGIN(INITIAL);
                    return ')';
                }
            }
            YY_BREAK
        case 94:
            YY_RULE_SETUP
#line 223 "asn_ref_lex.l"
            {
                parenthesisCount++;
            }
            YY_BREAK
        case 95:
            YY_RULE_SETUP
#line 227 "asn_ref_lex.l"
            {
                lineNumber++;
            }
            YY_BREAK
        case 96:
            YY_RULE_SETUP
#line 231 "asn_ref_lex.l"
            {
                /* eat anything inside parentheis */
            }
            YY_BREAK
        case 97:
            YY_RULE_SETUP
#line 238 "asn_ref_lex.l" 
            { return '<'; }
            YY_BREAK
        case 98:
            YY_RULE_SETUP
#line 240 "asn_ref_lex.l" 
            { return '>'; }
            YY_BREAK
        case 99:
            YY_RULE_SETUP
#line 242 "asn_ref_lex.l" 
            { return '|'; }
            YY_BREAK
        case 100:
            YY_RULE_SETUP
#line 244 "asn_ref_lex.l" 
            { return ';'; }
            YY_BREAK
        case 101:
            YY_RULE_SETUP
#line 246 "asn_ref_lex.l" 
            { return '+'; }
            YY_BREAK
        case 102:
            YY_RULE_SETUP
#line 248 "asn_ref_lex.l" 
            { return '-'; }
            YY_BREAK
        case 103:
            YY_RULE_SETUP
#line 250 "asn_ref_lex.l" 
            { return '*'; }
            YY_BREAK
        case 104:
            YY_RULE_SETUP
#line 252 "asn_ref_lex.l" 
            { return '/'; }
            YY_BREAK
        case 105:
            YY_RULE_SETUP
#line 254 "asn_ref_lex.l" 
            { return ','; }
            YY_BREAK
        case 106:
            YY_RULE_SETUP
#line 256 "asn_ref_lex.l" 
            { return '.'; }
            YY_BREAK
        case 107:
            YY_RULE_SETUP
#line 258 "asn_ref_lex.l" 
            { return ':'; }
            YY_BREAK
        case 108:
            YY_RULE_SETUP
#line 260 "asn_ref_lex.l" 
            { return '='; }
            YY_BREAK
        case 109:
            YY_RULE_SETUP
#line 262 "asn_ref_lex.l" 
            { return '|'; }
            YY_BREAK
        case 110:
            YY_RULE_SETUP
#line 264 "asn_ref_lex.l" 
            { return '^'; }
            YY_BREAK
        case 111:
            YY_RULE_SETUP
#line 266 "asn_ref_lex.l"
            {
                return BSTRING;
            }
            YY_BREAK
        case 112:
            YY_RULE_SETUP
#line 270 "asn_ref_lex.l"
            {
                return HSTRING;
            }
            YY_BREAK
        case 113:
            YY_RULE_SETUP
#line 274 "asn_ref_lex.l"
            {
                lineNumber += std::count(yytext, yytext + strlen(yytext), '\n');
                return CSTRING;
            }
            YY_BREAK
        case 114:
            YY_RULE_SETUP
#line 279 "asn_ref_lex.l"
            {
                const char* ptr = yytext;
                yylval.ival = 0;
                while (*ptr != '\0')
                    yylval.ival = yylval.ival * 10 +* ptr++ - '0';
                return INTEGER;
            }
            YY_BREAK
        case 115:
            YY_RULE_SETUP
#line 287 "asn_ref_lex.l"
            {
                yylval.sval = new std::string(yytext);
                return FIELDREFERENCE;
            }
            YY_BREAK
        case 116:
            YY_RULE_SETUP
#line 292 "asn_ref_lex.l"
            {
                yylval.sval = new std::string(yytext);
                return IDENTIFIER;
            }
            YY_BREAK
        case 117:
            YY_RULE_SETUP
#line 298 "asn_ref_lex.l"
            {
                yylval.sval = new std::string(yytext);
                int result;
                if (Module)
                    if ((result = Module->GetIdentifierType(yytext)) == OBJECTCLASSREFERENCE)
                        return OBJECTCLASSREFERENCE;
                return WOULDBE_OBJECTCLASSREFERENCE;
            }
            YY_BREAK
        case 118:
            YY_RULE_SETUP
#line 307 "asn_ref_lex.l"
            {
                yylval.sval = new std::string(yytext);
                return TYPEREFERENCE;
            }
            YY_BREAK
        case 119:
            YY_RULE_SETUP
#line 312 "asn_ref_lex.l" 
            { }
            YY_BREAK
        case 120:
            YY_RULE_SETUP
#line 314 "asn_ref_lex.l"
            {
                lineNumber++;
            }
            YY_BREAK
        case 121:
            YY_RULE_SETUP
#line 319 "asn_ref_lex.l" 
            { std::cerr << StdError(Fatal) << "unknown token " << yytext << std::endl; }
            YY_BREAK
        case 122:
            YY_RULE_SETUP
#line 322 "asn_ref_lex.l"
            ECHO;
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(brace):
        case YY_STATE_EOF(parenthesis):
        case YY_STATE_EOF(square_bracket):
            yyterminate();

        case YY_END_OF_BUFFER: {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = yy_hold_char;
            YY_RESTORE_YY_MORE_OFFSET

            if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW) {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between yy_current_buffer and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                yy_n_chars = yy_current_buffer->yy_n_chars;
                yy_current_buffer->yy_input_file = yyin;
                yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars]) {
                /* This was really a NUL. */
                yy_state_type yy_next_state;

                yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = yytext_ptr + YY_MORE_ADJ;

                if (yy_next_state) {
                    /* Consume the NUL. */
                    yy_cp = ++yy_c_buf_p;
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else {
                    yy_cp = yy_c_buf_p;
                    goto yy_find_action;
                }
            }

            else switch (yy_get_next_buffer()) {
                case EOB_ACT_END_OF_FILE: {
                    yy_did_buffer_switch_on_eof = 0;

                    if (yywrap()) {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                    }

                    else {
                        if (! yy_did_buffer_switch_on_eof)
                            YY_NEW_FILE;
                    }
                    break;
                }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p =
                        yytext_ptr + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext_ptr + YY_MORE_ADJ;
                    goto yy_match;

                case EOB_ACT_LAST_MATCH:
                    yy_c_buf_p =
                        &yy_current_buffer->yy_ch_buf[yy_n_chars];

                    yy_current_state = yy_get_previous_state();

                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext_ptr + YY_MORE_ADJ;
                    goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer() {
    register char* dest = yy_current_buffer->yy_ch_buf;
    register char* source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed");

    if (yy_current_buffer->yy_fill_buffer == 0) {
        /* Don't try to fill the buffer, so this is an EOF. */
        if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1) {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

    for (i = 0; i < number_to_move; ++i)
        *(dest++) = *(source++);

    if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_current_buffer->yy_n_chars = yy_n_chars = 0;

    else {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while (num_to_read <= 0) {
            /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
                "input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int)(yy_c_buf_p - b->yy_ch_buf);

            if (b->yy_is_our_buffer) {
                int new_size = b->yy_buf_size * 2;

                if (new_size <= 0)
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char*)
                               /* Include room in for 2 EOB chars. */
                               yy_flex_realloc((void*) b->yy_ch_buf,
                                               b->yy_buf_size + 2);
            } else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if (! b->yy_ch_buf)
                YY_FATAL_ERROR(
                    "fatal error - scanner input buffer overflow");

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                          number_to_move - 1;
#endif
        }

        if (num_to_read > YY_READ_BUF_SIZE)
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
                 yy_n_chars, num_to_read);

        yy_current_buffer->yy_n_chars = yy_n_chars;
    }

    if (yy_n_chars == 0) {
        if (number_to_move == YY_MORE_ADJ) {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin);
        }

        else {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
        }
    }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state() {
    register yy_state_type yy_current_state;
    register char* yy_cp;

    yy_current_state = yy_start;

    for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp) {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if (yy_accept[yy_current_state]) {
            yy_last_accepting_state = yy_current_state;
            yy_last_accepting_cpos = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
            yy_current_state = (int) yy_def[yy_current_state];
            if (yy_current_state >= 568)
                yy_c = yy_meta[(unsigned int) yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

    return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
    register int yy_is_jam;
    register char* yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if (yy_accept[yy_current_state]) {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int) yy_def[yy_current_state];
        if (yy_current_state >= 568)
            yy_c = yy_meta[(unsigned int) yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 567);

    return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput(int c, register char* yy_bp)
#else
static void yyunput(c, yy_bp)
int c;
register char* yy_bp;
#endif
{
    register char* yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if (yy_cp < yy_current_buffer->yy_ch_buf + 2) {
        /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char* dest = &yy_current_buffer->yy_ch_buf[
                                  yy_current_buffer->yy_buf_size + 2];
        register char* source =
            &yy_current_buffer->yy_ch_buf[number_to_move];

        while (source > yy_current_buffer->yy_ch_buf)
            *--dest = *--source;

        yy_cp += (int)(dest - source);
        yy_bp += (int)(dest - source);
        yy_current_buffer->yy_n_chars =
            yy_n_chars = yy_current_buffer->yy_buf_size;

        if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
            YY_FATAL_ERROR("flex scanner push-back overflow");
    }

    *--yy_cp = (char) c;


    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
}
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
    int c;

    *yy_c_buf_p = yy_hold_char;

    if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else {
            /* need more input */
            int offset = yy_c_buf_p - yytext_ptr;
            ++yy_c_buf_p;

            switch (yy_get_next_buffer()) {
            case EOB_ACT_LAST_MATCH:
                /* This happens because yy_g_n_b()
                 * sees that we've accumulated a
                 * token and flags that we need to
                 * try matching the token before
                 * proceeding.  But for input(),
                 * there's no matching to consider.
                 * So convert the EOB_ACT_LAST_MATCH
                 * to EOB_ACT_END_OF_FILE.
                 */

                /* Reset buffer status. */
                yyrestart(yyin);

            /* fall through */

            case EOB_ACT_END_OF_FILE: {
                if (yywrap())
                    return EOF;

                if (! yy_did_buffer_switch_on_eof)
                    YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p = yytext_ptr + offset;
                break;
            }
        }
    }

    c = *(unsigned char*) yy_c_buf_p;   /* cast for 8-bit char's */
    *yy_c_buf_p = '\0'; /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;


    return c;
}


#ifdef YY_USE_PROTOS
void yyrestart(FILE* input_file)
#else
void yyrestart(input_file)
FILE* input_file;
#endif
{
    if (! yy_current_buffer)
        yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

    yy_init_buffer(yy_current_buffer, input_file);
    yy_load_buffer_state();
}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
YY_BUFFER_STATE new_buffer;
#endif
{
    if (yy_current_buffer == new_buffer)
        return;

    if (yy_current_buffer) {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
    }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size)
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE* file;
int size;
#endif
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
    if (! b)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char*) yy_flex_alloc(b->yy_buf_size + 2);
    if (! b->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file);

    return b;
}


#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
YY_BUFFER_STATE b;
#endif
{
    if (! b)
        return;

    if (b == yy_current_buffer)
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if (b->yy_is_our_buffer)
        yy_flex_free((void*) b->yy_ch_buf);

    yy_flex_free((void*) b);
}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO((int));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE* file)
#else
void yy_init_buffer(b, file)
YY_BUFFER_STATE b;
FILE* file;
#endif


{
    yy_flush_buffer(b);

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
    b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
    b->yy_is_interactive = 0;
#else
    b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;
#endif
#endif
}


#ifdef YY_USE_PROTOS
void yy_flush_buffer(YY_BUFFER_STATE b)
#else
void yy_flush_buffer(b)
YY_BUFFER_STATE b;
#endif

{
    if (! b)
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if (b == yy_current_buffer)
        yy_load_buffer_state();
}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size)
#else
YY_BUFFER_STATE yy_scan_buffer(base, size)
char* base;
yy_size_t size;
#endif
{
    YY_BUFFER_STATE b;

    if (size < 2 ||
            base[size - 2] != YY_END_OF_BUFFER_CHAR ||
            base[size - 1] != YY_END_OF_BUFFER_CHAR)
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
    if (! b)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

    b->yy_buf_size = size - 2;  /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b);

    return b;
}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string(yyconst char* yy_str)
#else
YY_BUFFER_STATE yy_scan_string(yy_str)
yyconst char* yy_str;
#endif
{
    int len;
    for (len = 0; yy_str[len]; ++len)
        ;

    return yy_scan_bytes(yy_str, len);
}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes(yyconst char* bytes, int len)
#else
YY_BUFFER_STATE yy_scan_bytes(bytes, len)
yyconst char* bytes;
int len;
#endif
{
    YY_BUFFER_STATE b;
    char* buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = len + 2;
    buf = (char*) yy_flex_alloc(n);
    if (! buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

    for (i = 0; i < len; ++i)
        buf[i] = bytes[i];

    buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf, n);
    if (! b)
        YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state)
int new_state;
#endif
{
    if (yy_start_stack_ptr >= yy_start_stack_depth) {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof(int);

        if (! yy_start_stack)
            yy_start_stack = (int*) yy_flex_alloc(new_size);

        else
            yy_start_stack = (int*) yy_flex_realloc(
                                 (void*) yy_start_stack, new_size);

        if (! yy_start_stack)
            YY_FATAL_ERROR(
                "out of memory expanding start-condition stack");
    }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state() {
    if (--yy_start_stack_ptr < 0)
        YY_FATAL_ERROR("start-condition stack underflow");

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state() {
    return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error(yyconst char msg[])
#else
static void yy_fatal_error(msg)
char msg[];
#endif
{
    (void) fprintf(stderr, "%s\n", msg);
    exit(YY_EXIT_FAILURE);
}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
    { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
    } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char* s1, yyconst char* s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char* s1;
yyconst char* s2;
int n;
#endif
{
    register int i;
    for (i = 0; i < n; ++i)
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char* s)
#else
static int yy_flex_strlen(s)
yyconst char* s;
#endif
{
    register int n;
    for (n = 0; s[n]; ++n)
        ;

    return n;
}
#endif


#ifdef YY_USE_PROTOS
static void* yy_flex_alloc(yy_size_t size)
#else
static void* yy_flex_alloc(size)
yy_size_t size;
#endif
{
    return (void*) malloc(size);
}

#ifdef YY_USE_PROTOS
static void* yy_flex_realloc(void* ptr, yy_size_t size)
#else
static void* yy_flex_realloc(ptr, size)
void* ptr;
yy_size_t size;
#endif
{
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void*) realloc((char*) ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void* ptr)
#else
static void yy_flex_free(ptr)
void* ptr;
#endif
{
    free(ptr);
}

#if YY_MAIN
int main() {
    yylex();
    return 0;
}
#endif
#line 322 "asn_ref_lex.l"
