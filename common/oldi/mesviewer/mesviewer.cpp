#include "mesviewer.h"

MesViewer::MesViewer(QWidget* parent, Qt::WindowFlags flags)
    : QFrame(parent, flags)
{
    setupUi(this);

    comboBox->addItem(QString::null, 1);
    comboBox->addItem(QString::null, 2);
    comboBox->addItem(QString::null, 3);

    ApplyFilter(0, "", "", "", "", QDateTime());
    Translate();
    tableView->setModel(&m_model);
    tableView->setSortingEnabled(false);
    connect(butApply, SIGNAL(clicked()), this, SLOT(OnApply()));
}

void MesViewer::changeEvent(QEvent *event)
{
    //LanguageChange events should not be confused with LocaleChange events.
    if (event->type() == QEvent::LocaleChange) {
        // HERE we can un|install qtranslator
        //    Locale-Change events are generated by the system and tell the application,
        //    "Maybe you should load a new translation."
    } else if (event->type() == QEvent::LanguageChange) {
        //    LanguageChange events are generated by Qt and tell the application's widgets,
        //    "Maybe you should retranslate all your strings."
        Translate();
    }

    QFrame::changeEvent(event);
}

void MesViewer::Translate()
{
    retranslateUi(this);

    for(int i = 0; i < comboBox->count(); ++i)
    {
        QString sText(comboBox->itemText(i));
        switch(comboBox->itemData(i).toInt())
        {
        case 1:
            sText = tr("In");
            break;
        case 2:
            sText = tr("Out");
            break;
        case 3:
            sText = tr("All");
            break;
        }
        comboBox->setItemText(i, sText);
    }

    m_model.setHeaderData(0, Qt::Horizontal, tr("Type"));
    m_model.setHeaderData(1, Qt::Horizontal, tr("From"));
    m_model.setHeaderData(2, Qt::Horizontal, tr("To"));
    m_model.setHeaderData(3, Qt::Horizontal, tr("Time"));
    m_model.setHeaderData(4, Qt::Horizontal, tr("Text"));
}

void MesViewer::OnApply()
{
    ApplyFilter(
            comboBox->itemData(comboBox->currentIndex()).toInt(),
            editFrom->text(),
            editTo->text(),
            editType->text(),
            editACID->text(),
            dateTimeEdit->dateTime());
}

void MesViewer::ApplyFilter(int in_out, QString sFrom, QString sTo, QString sType, QString sACID, QDateTime dt)
{
    QApplication::setOverrideCursor(Qt::WaitCursor);
    QString sSubSelect;
    QString sWhere;
    if(in_out & 1)
        sSubSelect += "SELECT msgtype, msgfrom, msgto, msgtime, msgtext FROM archiveinputmessages";
    if(in_out == 3)
        sSubSelect += " UNION ALL ";
    if(in_out & 2)
        sSubSelect += "SELECT msgtype, msgfrom, msgto, msgtime, msgtext FROM archivemessages";

    if(sSubSelect.isEmpty())
    {
        sSubSelect = "SELECT msgtype, msgfrom, msgto, msgtime, msgtext FROM archivemessages";
        sWhere = "1=0";
    }

    if(!sFrom.isEmpty())
    {
        if(!sWhere.isEmpty()) sWhere += " AND ";
        QString sTemp;
        QStringList list = sFrom.split(QRegExp("\\s+"), QString::SkipEmptyParts);
        for(int i = 0; i < list.size(); ++i)
        {
            if(!sTemp.isEmpty()) sTemp += " OR ";
            sTemp += "msgfrom = '" + list[i] + "'";
        }
        sWhere += "(" + sTemp + ")";
    }
    if(!sTo.isEmpty())
    {
        if(!sWhere.isEmpty()) sWhere += " AND ";
        QString sTemp;
        QStringList list = sTo.split(QRegExp("\\s+"), QString::SkipEmptyParts);
        for(int i = 0; i < list.size(); ++i)
        {
            if(!sTemp.isEmpty()) sTemp += " OR ";
            sTemp += "msgto = '" + list[i] + "'";
        }
        sWhere += "(" + sTemp + ")";
    }
    if(!sType.isEmpty())
    {
        if(!sWhere.isEmpty()) sWhere += " AND ";
        QString sTemp;
        QStringList list = sType.split(QRegExp("\\s+"), QString::SkipEmptyParts);
        for(int i = 0; i < list.size(); ++i)
        {
            if(!sTemp.isEmpty()) sTemp += " OR ";
            sTemp += "msgtype = '" + list[i] + "'";
        }
        sWhere += "(" + sTemp + ")";
    }
    if(!sACID.isEmpty())
    {
        if(!sWhere.isEmpty()) sWhere += " AND ";
        QString sTemp;
        QStringList list = sACID.split(QRegExp("\\s+"), QString::SkipEmptyParts);
        for(int i = 0; i < list.size(); ++i)
        {
            if(!sTemp.isEmpty()) sTemp += " OR ";
            sTemp += "msgtext LIKE '%" + list[i] + "%'";
        }
        sWhere += "(" + sTemp + ")";
    }
    if(dt.isValid())
    {
        if(!sWhere.isEmpty()) sWhere += " AND ";
        sWhere += "msgtime > to_timestamp('" + dt.toString("yyyy.MM.dd hh:mm:ss") + "', 'YYYY.MM.DD HH24:MI:SS')";
    }

    QString sSelect = "SELECT msgtype, msgfrom, msgto, msgtime, msgtext FROM (" + sSubSelect + ")";
    if(!sWhere.isEmpty())
        sSelect += " WHERE " + sWhere;

    sSelect += " ORDER BY msgtime DESC";

    m_model.setQuery(sSelect);
    //tableView->resizeColumnsToContents();
    QApplication::restoreOverrideCursor();
}

void MesViewer::SetFilter(int in_out, QString sFrom, QString sTo, QString sType, QString sACID, QDateTime dt)
{
    int index = 0;
    for(int i = 0; i < comboBox->count(); ++i)
        if(comboBox->itemData(i).toInt() == in_out)
            index = i;
    comboBox->setCurrentIndex(index);
    editFrom->setText(sFrom);
    editTo->setText(sTo);
    editType->setText(sType);
    editACID->setText(sACID);
    dateTimeEdit->setDateTime(dt);
}
